"""
Autogenerated input type of AcceptRevision
"""
input AcceptRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: String
  id: Int!
  organizationId: Int
}

"""
Autogenerated return type of AcceptRevision
"""
type AcceptRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  revision: Revision!
  supersededRevisions: [Revision!]!
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organizationId: Int
  subject: CommentableInput!
  title: String
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: Comment
}

type AdvancedSearchResult {
  permalinkId: String
  resultIds: [Int!]!
  searchEndpoint: String!
}

enum BooleanOperator {
  AND
  OR
}

input BooleanSearchInput {
  value: Boolean!
}

type BrowseGene {
  aliases: [GeneAlias!]
  assertionCount: Int!
  description: String!
  diseases: [Disease!]
  drugs: [Drug!]
  entrezId: Int!
  evidenceItemCount: Int!
  id: Int!
  name: String!
  variantCount: Int!
}

"""
The connection type for BrowseGene.
"""
type BrowseGeneConnection {
  """
  A list of edges.
  """
  edges: [BrowseGeneEdge]

  """
  A list of nodes.
  """
  nodes: [BrowseGene]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!

  """
  Total # of pages, based on total count and pagesize
  """
  totalPageCount: Int!
}

"""
An edge in a connection.
"""
type BrowseGeneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseGene
}

type ClinicalTrial {
  description: String!
  id: Int!
  name: String!
  nctId: String!
}

type Comment {
  comment: String!
  commentor: User!
  createdAt: ISO8601DateTime!
  id: Int!
  title: String
}

enum CommentableEntities {
  GENE
}

"""
Entity to comment on
"""
input CommentableInput {
  entityType: CommentableEntities!
  id: Int!
}

type Disease {
  diseaseUrl: String
  displayName: String!
  doid: Int
  id: Int!
  name: String!
}

type Drug {
  drugUrl: String
  id: String!
  name: String!
  ncitId: String
}

type Event {
  action: EventAction!
  createdAt: ISO8601DateTime!
  id: Int!
  organization: Organization!
  originatingUser: User!
}

enum EventAction {
  ACCEPTED
  ASSERTION_ACCEPTED
  ASSERTION_REJECTED
  ASSERTION_SUBMITTED
  COMMENTED
  FLAGGED
  FLAG_RESOLVED
  PUBLICATION_SUGGESTED
  REJECTED
  REVERTED
  REVISION_ACCEPTED
  REVISION_REJECTED
  REVISION_SUGGESTED
  REVISION_SUPERSEDED
  SUBMITTED
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge]

  """
  A list of nodes.
  """
  nodes: [Event]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!

  """
  Total # of pages, based on total count and pagesize
  """
  totalPageCount: Int!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

type EvidenceItem {
  description: String!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  variant: Variant!
}

"""
The connection type for EvidenceItem.
"""
type EvidenceItemConnection {
  """
  A list of edges.
  """
  edges: [EvidenceItemEdge]

  """
  A list of nodes.
  """
  nodes: [EvidenceItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!

  """
  Total # of pages, based on total count and pagesize
  """
  totalPageCount: Int!
}

"""
An edge in a connection.
"""
type EvidenceItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EvidenceItem
}

type Flag {
  id: Int!
  state: FlagState!
}

"""
Autogenerated input type of FlagEntity
"""
input FlagEntityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: String!
  organizationId: Int
  subject: FlaggableInput!
}

"""
Autogenerated return type of FlagEntity
"""
type FlagEntityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  flag: Flag
}

enum FlagState {
  open
  resolved
}

enum FlaggableEntities {
  GENE
}

"""
Entity to flag
"""
input FlaggableInput {
  entityType: FlaggableEntities!
  id: Int!
}

type Gene {
  aliases: [GeneAlias!]
  comments: [Comment!]
  description: String!
  entrezId: Int!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  lifecycleActions: Lifecycle!
  myGeneInfoDetails: JSON
  name: String!
  officialName: String!
  revisions: [Revision!]
  sources: [Source!]
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): VariantConnection
}

type GeneAlias {
  name: String!
}

input GeneFields {
  description: String!
  sourceIds: [Int!]!
}

input GeneSearchFilter {
  alias: StringSearchInput
  booleanOperator: BooleanOperator
  description: StringSearchInput
  entrezId: IntSearchInput
  entrezSymbol: StringSearchInput
  hasAssertion: BooleanSearchInput
  id: IntSearchInput
  openRevisionCount: IntSearchInput
  subFilters: [GeneSearchFilter!]
}

input GenesSort {
  """
  Available columns for sorting
  """
  column: GenesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum GenesSortColumns {
  assertionCount
  diseaseName
  drugName
  entrezSymbol
  evidenceItemCount
  geneAlias
  variantCount
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

input IntSearchInput {
  comparisonOperator: IntSearchOperator!
  value: Int!
}

enum IntSearchOperator {
  """
  Equal To
  """
  EQ
  GE
  GT
  LE
  LT
  NE
}

"""
Represents untyped JSON
"""
scalar JSON

type Lifecycle {
  lastCommentedOn: Event
  lastModified: Event
  lastReviewed: Event
}

type LinkoutData {
  currentValue: ModeratedField!
  diffValue: ModeratedFieldDiff!
  name: String!
  suggestedValue: ModeratedField!
}

"""
Autogenerated input type of MarkNotificationsAsRead
"""
input MarkNotificationsAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ids: [Int!]!
}

"""
Autogenerated return type of MarkNotificationsAsRead
"""
type MarkNotificationsAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notifications: [Notification!]!
}

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedField = ObjectField | ScalarField

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedFieldDiff = ObjectFieldDiff | ScalarField

type ModeratedObjectField {
  displayName: String!
  displayType: String!
  entityType: String!
  id: Int!
}

type Mutation {
  acceptRevision(
    """
    Parameters for AcceptRevision
    """
    input: AcceptRevisionInput!
  ): AcceptRevisionPayload
  addComment(
    """
    Parameters for AddComment
    """
    input: AddCommentInput!
  ): AddCommentPayload
  flagEntity(
    """
    Parameters for FlagEntity
    """
    input: FlagEntityInput!
  ): FlagEntityPayload
  markNotificationsAsRead(
    """
    Parameters for MarkNotificationsAsRead
    """
    input: MarkNotificationsAsReadInput!
  ): MarkNotificationsAsReadPayload
  rejectRevision(
    """
    Parameters for RejectRevision
    """
    input: RejectRevisionInput!
  ): RejectRevisionPayload
  resolveFlag(
    """
    Parameters for ResolveFlag
    """
    input: ResolveFlagInput!
  ): ResolveFlagPayload
  subscribe(
    """
    Parameters for Subscribe
    """
    input: SubscribeInput!
  ): SubscribePayload
  suggestGeneRevision(
    """
    Parameters for SuggestGeneRevision
    """
    input: SuggestGeneRevisionInput!
  ): SuggestGeneRevisionPayload
  unsubscribe(
    """
    Parameters for Unsubscribe
    """
    input: UnsubscribeInput!
  ): UnsubscribePayload
}

type Notification {
  createdAt: ISO8601DateTime!
  event: Event!
  id: Int!
  notifiedUser: User!
  originatingUser: User!
  seen: Boolean!
  subscription: Subscription
  type: NotificationReason!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]

  """
  A list of nodes.
  """
  nodes: [Notification]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!

  """
  Total # of pages, based on total count and pagesize
  """
  totalPageCount: Int!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

enum NotificationReason {
  MENTION
  SUBSCRIPTION
}

type ObjectField {
  objects: [ModeratedObjectField!]!
}

type ObjectFieldDiff {
  addedObjects: [ModeratedObjectField!]!
  keptObjects: [ModeratedObjectField!]!
  removedObjects: [ModeratedObjectField!]!
}

type Organization {
  description: String!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  name: String!
  profileImagePath(size: Int = 56): String
  url: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  browseEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int
    subject: SubscribableInput
  ): EventConnection!
  browseGenes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneAlias: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: GenesSort
  ): BrowseGeneConnection!

  """
  Find a disease by CIViC ID
  """
  disease(id: ID!): Disease

  """
  Find a drug by CIViC ID
  """
  drug(id: ID!): Drug

  """
  Find a gene by CIViC ID
  """
  gene(id: ID!): Gene
  searchByPermalink(permalinkId: String!): AdvancedSearchResult!
  searchGenes(createPermalink: Boolean = false, query: GeneSearchFilter!): AdvancedSearchResult!

  """
  Find a source by CIViC ID
  """
  source(id: ID!): Source
  user(userId: Int!): User
  viewer: User
}

"""
Autogenerated input type of RejectRevision
"""
input RejectRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: String!
  id: Int!
  organizationId: Int
}

"""
Autogenerated return type of RejectRevision
"""
type RejectRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  revision: Revision!
}

"""
Autogenerated input type of ResolveFlag
"""
input ResolveFlagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: String!
  id: Int!
  organizationId: Int
}

"""
Autogenerated return type of ResolveFlag
"""
type ResolveFlagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  flag: Flag
}

type Revision {
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  currentValue: JSON!
  fieldName: String!
  id: Int!
  linkoutData: LinkoutData!
  revisionsetId: String!
  revisor: User!
  status: RevisionStatus!
  suggestedValue: JSON!
  updatedAt: ISO8601DateTime!
}

type RevisionResult {
  fieldName: String!
  id: Int!
  newlyCreated: Boolean!
  revisionsetId: String!
}

enum RevisionStatus {
  accepted
  new
  rejected
  superseded
}

type ScalarField {
  value: String
}

enum SortDirection {
  ASC
  DESC
}

type Source {
  ascoAbstractId: Int
  citation: String!
  citationId: Int!
  clinicalTrials: [ClinicalTrial!]
  fullJournalTitle: String!
  id: Int!
  journal: String!
  name: String!
  publicationDay: Int
  publicationMonth: Int!
  publicationYear: Int!
  sourceType: SourceSource!
  sourceUrl: String!
  status: SourceStatus!
}

enum SourceSource {
  ASCO
  PubMed
}

enum SourceStatus {
  FullyCurated
  PartiallyCurated
  Submitted
}

input StringSearchInput {
  comparisonOperator: StringSearchOperator!
  value: String!
}

enum StringSearchOperator {
  CONTAINS
  DOES_NOT_CONTAIN
  EQ
  NE
  STARTS_WITH
}

type Subscribable {
  entityType: SubscribableEntities!
  id: Int!
}

enum SubscribableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  REVISION
  VARIANT
}

"""
Entity to subscribe to
"""
input SubscribableInput {
  entityType: SubscribableEntities!
  id: Int!
}

"""
Autogenerated input type of Subscribe
"""
input SubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  subscribables: [SubscribableInput!]!
  subscribeToChildren: Boolean = false
}

"""
Autogenerated return type of Subscribe
"""
type SubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  subscriptions: [Subscription!]!
}

type Subscription {
  id: Int!
}

"""
Autogenerated input type of SuggestGeneRevision
"""
input SuggestGeneRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: String!
  fields: GeneFields!
  id: Int!
  organizationId: Int
}

"""
Autogenerated return type of SuggestGeneRevision
"""
type SuggestGeneRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gene: Gene!
  results: [RevisionResult!]!
}

"""
Autogenerated input type of Unsubscribe
"""
input UnsubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  subscribables: [SubscribableInput!]!
  unsubscribeFromChildren: Boolean = false
}

"""
Autogenerated return type of Unsubscribe
"""
type UnsubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  unsubscribedEntities: [Subscribable!]!
}

type User {
  bio: String
  country: String
  email: String
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  name: String!

  """
  Filterable list of notifications for the logged in user.
  """
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter the response to include only notifications generated by certain actions (ex: commenting).
    """
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    includeSeen: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the response to include only notifications of a certaint type (ex: mentions).
    """
    notificationType: NotificationReason

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    subscriptionId: Int
  ): NotificationConnection
  organizations: [Organization!]
  profileImagePath(size: Int = 56): String
  role: String!
  url: String
  username: String!
}

type Variant {
  description: String!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EvidenceItemConnection
  gene: Gene!
  id: Int!
  name: String!
}

"""
The connection type for Variant.
"""
type VariantConnection {
  """
  A list of edges.
  """
  edges: [VariantEdge]

  """
  A list of nodes.
  """
  nodes: [Variant]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!

  """
  Total # of pages, based on total count and pagesize
  """
  totalPageCount: Int!
}

"""
An edge in a connection.
"""
type VariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Variant
}