"""
Autogenerated input type of AcceptRevision
"""
input AcceptRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Body of an optional comment to attach to the revision on acceptance.
  """
  comment: String

  """
  The ID of the Revision to accept.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of AcceptRevision
"""
type AcceptRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly accepted Revision.
  """
  revision: Revision!

  """
  A list of any revisions that were superseded by the acceptance of this one.
  """
  supersededRevisions: [Revision!]!
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  Text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The commentable to attach the comment to. Specified by ID and Type.
  """
  subject: CommentableInput!

  """
  Optional title for the comment.
  """
  title: String
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: Comment
}

type AdvancedSearchResult {
  permalinkId: String
  resultIds: [Int!]!
  searchEndpoint: String!
}

enum BooleanOperator {
  AND
  OR
}

input BooleanSearchInput {
  value: Boolean!
}

type BrowseGene {
  aliases: [GeneAlias!]
  assertionCount: Int!
  description: String!
  diseases: [Disease!]
  drugs: [Drug!]
  entrezId: Int!
  evidenceItemCount: Int!
  id: Int!
  name: String!
  variantCount: Int!
}

"""
The connection type for BrowseGene.
"""
type BrowseGeneConnection {
  """
  A list of edges.
  """
  edges: [BrowseGeneEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseGene]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseGeneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseGene
}

type ClinicalTrial {
  description: String!
  id: Int!
  name: String!
  nctId: String!
}

type Comment {
  comment: String!
  commentor: User!
  createdAt: ISO8601DateTime!
  creationEvent: Event
  id: Int!
  title: String
}

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [Comment]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

enum CommentableEntities {
  GENE
}

"""
Entity to comment on
"""
input CommentableInput {
  """
  The type of the entity to comment on.
  """
  entityType: CommentableEntities!

  """
  ID of the entity to comment on.
  """
  id: Int!
}

type Disease {
  diseaseUrl: String
  displayName: String!
  doid: Int
  id: Int!
  name: String!
}

type Drug {
  drugUrl: String
  id: String!
  name: String!
  ncitId: String
}

enum DrugInteraction {
  COMBINATION
  SEQUENTIAL
  SUBSTITUTES
}

type Event {
  action: EventAction!
  createdAt: ISO8601DateTime!
  id: Int!
  organization: Organization!
  originatingUser: User!
}

enum EventAction {
  ACCEPTED
  ASSERTION_ACCEPTED
  ASSERTION_REJECTED
  ASSERTION_SUBMITTED
  COMMENTED
  FLAGGED
  FLAG_RESOLVED
  PUBLICATION_SUGGESTED
  REJECTED
  REVERTED
  REVISION_ACCEPTED
  REVISION_REJECTED
  REVISION_SUGGESTED
  REVISION_SUPERSEDED
  SUBMITTED
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [Event]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

enum EvidenceClinicalSignificance {
  ADVERSE_RESPONSE
  BENIGN
  BETTER_OUTCOME
  DOMINANT_NEGATIVE
  GAIN_OF_FUNCTION
  LIKELY_BENIGN
  LIKELY_PATHOGENIC
  LOSS_OF_FUNCTION
  NA
  NEGATIVE
  NEOMORPHIC
  PATHOGENIC
  POOR_OUTCOME
  POSITIVE
  REDUCED_SENSITIVITY
  RESISTANCE
  SENSITIVITYRESPONSE
  UNALTERED_FUNCTION
  UNCERTAIN_SIGNIFICANCE
  UNKNOWN
}

enum EvidenceDirection {
  DOES_NOT_SUPPORT
  NA
  SUPPORTS
}

type EvidenceItem {
  clinicalSignificance: EvidenceClinicalSignificance!
  comments: [Comment!]
  description: String!
  disease: Disease
  drugInteractionType: DrugInteraction
  drugs: [Drug!]
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  evidenceDirection: EvidenceDirection!
  evidenceLevel: EvidenceLevel!
  evidenceRating: Int
  evidenceType: EvidenceType!
  flagged: Boolean!
  id: Int!
  phenotypes: [Phenotype!]
  revisions: [Revision!]
  source: Source!
  status: EvidenceStatus!
  variant: Variant!
  variantHgvs: String!
  variantOrigin: VariantOrigin!
}

"""
The connection type for EvidenceItem.
"""
type EvidenceItemConnection {
  """
  A list of edges.
  """
  edges: [EvidenceItemEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [EvidenceItem]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EvidenceItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EvidenceItem
}

enum EvidenceLevel {
  A
  B
  C
  D
  E
}

enum EvidenceStatus {
  ACCEPTED
  REJECTED
  SUBMITTED
}

enum EvidenceType {
  DIAGNOSTIC
  FUNCTIONAL
  ONCOGENIC
  PREDICTIVE
  PREDISPOSING
  PROGNOSTIC
}

type Flag {
  id: Int!
  state: FlagState!
}

"""
Autogenerated input type of FlagEntity
"""
input FlagEntityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the problem you observed with this entity.
  """
  comment: String!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The entity to flag, specified by its ID and type.
  """
  subject: FlaggableInput!
}

"""
Autogenerated return type of FlagEntity
"""
type FlagEntityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Flag.
  """
  flag: Flag
}

enum FlagState {
  open
  resolved
}

"""
Enumeration of all entities in CIViC that can be flagged.
"""
enum FlaggableEntities {
  GENE
}

"""
Entity to flag
"""
input FlaggableInput {
  """
  The type of the entity to flag.
  """
  entityType: FlaggableEntities!

  """
  The ID of the entity.
  """
  id: Int!
}

type Gene {
  aliases: [GeneAlias!]
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommentConnection
  description: String!
  entrezId: Int!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  lifecycleActions: Lifecycle!
  myGeneInfoDetails: JSON
  name: String!
  officialName: String!
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RevisionConnection
  sources: [Source!]
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): VariantConnection
}

type GeneAlias {
  name: String!
}

input GeneFields {
  """
  The Gene's description/summary text.
  """
  description: String!

  """
  Source IDs cited by the Gene's summary.
  """
  sourceIds: [Int!]!
}

input GeneSearchFilter {
  alias: StringSearchInput
  booleanOperator: BooleanOperator
  description: StringSearchInput
  entrezId: IntSearchInput
  entrezSymbol: StringSearchInput
  hasAssertion: BooleanSearchInput
  id: IntSearchInput
  openRevisionCount: IntSearchInput
  subFilters: [GeneSearchFilter!]
}

input GenesSort {
  """
  Available columns for sorting
  """
  column: GenesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum GenesSortColumns {
  assertionCount
  diseaseName
  drugName
  entrezSymbol
  evidenceItemCount
  geneAlias
  variantCount
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

input IntSearchInput {
  comparisonOperator: IntSearchOperator!
  value: Int!
}

enum IntSearchOperator {
  """
  Equal To
  """
  EQ
  GE
  GT
  LE
  LT
  NE
}

"""
Represents untyped JSON
"""
scalar JSON

type Lifecycle {
  lastCommentedOn: Event
  lastModified: Event
  lastReviewed: Event
}

type LinkoutData {
  currentValue: ModeratedField!
  diffValue: ModeratedFieldDiff!
  name: String!
  suggestedValue: ModeratedField!
}

"""
Autogenerated input type of MarkNotificationsAsRead
"""
input MarkNotificationsAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more Notification IDs.
  """
  ids: [Int!]!
}

"""
Autogenerated return type of MarkNotificationsAsRead
"""
type MarkNotificationsAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of the notifications in their new state.
  """
  notifications: [Notification!]!
}

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedField = ObjectField | ScalarField

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedFieldDiff = ObjectFieldDiff | ScalarField

type ModeratedObjectField {
  displayName: String!
  displayType: String!
  entityType: String!
  id: Int!
}

type Mutation {
  """
  Accept a revision by ID. The accepting user must be an editor with a valid
  conflict of interest statement on file and the revision must not be their own.
  """
  acceptRevision(
    """
    Parameters for AcceptRevision
    """
    input: AcceptRevisionInput!
  ): AcceptRevisionPayload

  """
  Add a comment to any commentable entity.
  """
  addComment(
    """
    Parameters for AddComment
    """
    input: AddCommentInput!
  ): AddCommentPayload

  """
  Flag an entity to signal to the editorial team that you believe there is an issue with it.
  """
  flagEntity(
    """
    Parameters for FlagEntity
    """
    input: FlagEntityInput!
  ): FlagEntityPayload

  """
  Mark one or more of your notifications as read. The notification IDs provided must belong to the requesting user.
  """
  markNotificationsAsRead(
    """
    Parameters for MarkNotificationsAsRead
    """
    input: MarkNotificationsAsReadInput!
  ): MarkNotificationsAsReadPayload

  """
  Reject a revision by ID. Any user may reject a Revision that they submitted
  themselves. Otherwise, the rejecting user must be an editor with valid
  conflict of interest statement on file.
  """
  rejectRevision(
    """
    Parameters for RejectRevision
    """
    input: RejectRevisionInput!
  ): RejectRevisionPayload

  """
  Resolve a flag on a CIViC entity indicating that it was either erronously flagged or the issue has been resolved.
  Any user may resolve their own flag however only editors with valid conflict
  of interest statements can resolve other flags.
  """
  resolveFlag(
    """
    Parameters for ResolveFlag
    """
    input: ResolveFlagInput!
  ): ResolveFlagPayload

  """
  Subscribe to a CIViC entity in order to receive notifications about it.
  """
  subscribe(
    """
    Parameters for Subscribe
    """
    input: SubscribeInput!
  ): SubscribePayload

  """
  Suggest a Revision to a Gene entity.
  """
  suggestGeneRevision(
    """
    Parameters for SuggestGeneRevision
    """
    input: SuggestGeneRevisionInput!
  ): SuggestGeneRevisionPayload

  """
  Unsubscribe from a CIViC entity to stop receiving notifications about it.
  """
  unsubscribe(
    """
    Parameters for Unsubscribe
    """
    input: UnsubscribeInput!
  ): UnsubscribePayload
}

type Notification {
  createdAt: ISO8601DateTime!
  event: Event!
  id: Int!
  notifiedUser: User!
  originatingUser: User!
  seen: Boolean!
  subscription: Subscription
  type: NotificationReason!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [Notification]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

enum NotificationReason {
  MENTION
  SUBSCRIPTION
}

type ObjectField {
  objects: [ModeratedObjectField!]!
}

type ObjectFieldDiff {
  addedObjects: [ModeratedObjectField!]!
  keptObjects: [ModeratedObjectField!]!
  removedObjects: [ModeratedObjectField!]!
}

type Organization {
  description: String!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  name: String!
  profileImagePath(size: Int = 56): String
  url: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Phenotype {
  hpoClass: String!
  hpoId: String!
  id: Int!
}

type Query {
  browseEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int
    subject: SubscribableInput
  ): EventConnection!
  browseGenes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneAlias: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: GenesSort
  ): BrowseGeneConnection!

  """
  Find a disease by CIViC ID
  """
  disease(id: Int!): Disease

  """
  Find a drug by CIViC ID
  """
  drug(id: Int!): Drug
  evidenceItem(id: Int!): EvidenceItem

  """
  Find a gene by CIViC ID
  """
  gene(id: Int!): Gene
  searchByPermalink(permalinkId: String!): AdvancedSearchResult!
  searchGenes(createPermalink: Boolean = false, query: GeneSearchFilter!): AdvancedSearchResult!

  """
  Find a source by CIViC ID
  """
  source(id: Int!): Source
  user(userId: Int!): User
  viewer: User
}

"""
Autogenerated input type of RejectRevision
"""
input RejectRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text explaining the reasoning for rejecting this Revision. Will be attached as a comment.
  """
  comment: String!

  """
  The ID of the Revision to reject.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of RejectRevision
"""
type RejectRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The rejected Revision.
  """
  revision: Revision!
}

"""
Autogenerated input type of ResolveFlag
"""
input ResolveFlagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for resolving the flag. Will be attached as a comment.
  """
  comment: String!

  """
  The ID of the flag to resolve.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of ResolveFlag
"""
type ResolveFlagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  flag: Flag
}

type Revision {
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  creationEvent: Event
  currentValue: JSON!
  fieldName: String!
  id: Int!
  linkoutData: LinkoutData!
  revisionsetId: String!
  revisor: User!
  status: RevisionStatus!
  suggestedValue: JSON!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Revision.
"""
type RevisionConnection {
  """
  A list of edges.
  """
  edges: [RevisionEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [Revision]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RevisionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Revision
}

type RevisionResult {
  """
  Name of the field on the moderated entity that the Revision pertains to.
  """
  fieldName: String!

  """
  ID of the Revision.
  """
  id: Int!

  """
  Was this Revision newly created as a result of this request?
  """
  newlyCreated: Boolean!

  """
  An identifier that can be used to group Revisions proposed at the same time.
  """
  revisionsetId: String!
}

enum RevisionStatus {
  accepted
  new
  rejected
  superseded
}

type ScalarField {
  value: String
}

enum SortDirection {
  ASC
  DESC
}

type Source {
  ascoAbstractId: Int
  citation: String!
  citationId: Int!
  clinicalTrials: [ClinicalTrial!]
  fullJournalTitle: String!
  id: Int!
  journal: String!
  name: String!
  publicationDay: Int
  publicationMonth: Int!
  publicationYear: Int!
  sourceType: SourceSource!
  sourceUrl: String!
  status: SourceStatus!
}

enum SourceSource {
  ASCO
  PubMed
}

enum SourceStatus {
  FullyCurated
  PartiallyCurated
  Submitted
}

input StringSearchInput {
  comparisonOperator: StringSearchOperator!
  value: String!
}

enum StringSearchOperator {
  CONTAINS
  DOES_NOT_CONTAIN
  EQ
  NE
  STARTS_WITH
}

type Subscribable {
  entityType: SubscribableEntities!
  id: Int!
}

"""
Enumeration of all subscribable CIViC entities.
"""
enum SubscribableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  REVISION
  VARIANT
}

"""
Entity to subscribe to.
"""
input SubscribableInput {
  """
  Type of subscribable entity.
  """
  entityType: SubscribableEntities!

  """
  ID of subscribable entity.
  """
  id: Int!
}

"""
Autogenerated input type of Subscribe
"""
input SubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more entities to subscribe to, each identified by its ID and type.
  """
  subscribables: [SubscribableInput!]!

  """
  Do you want to subscribe to related child entities of the subscribed entities?
  IE: If you subscribe to a Gene, do you want to receive notifications for its Variants as well?
  """
  subscribeToChildren: Boolean = false
}

"""
Autogenerated return type of Subscribe
"""
type SubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created subscription objects.
  """
  subscriptions: [Subscription!]!
}

type Subscription {
  id: Int!
}

"""
Autogenerated input type of SuggestGeneRevision
"""
input SuggestGeneRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the Gene's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: GeneFields!

  """
  The ID of the Gene to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestGeneRevision
"""
type SuggestGeneRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Gene the user has proposed a Revision to.
  """
  gene: Gene!

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of Unsubscribe
"""
input UnsubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more entities to unsubscribe from, each identified by its ID and type.
  """
  subscribables: [SubscribableInput!]!

  """
  Do you also wish to stop receiving notifications from child entities?
  IE: If you unsubscribe from a Gene do you want to stop receiving notifications for its Variants as well?
  """
  unsubscribeFromChildren: Boolean = false
}

"""
Autogenerated return type of Unsubscribe
"""
type UnsubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The entities that were unsubscribed from.
  """
  unsubscribedEntities: [Subscribable!]!
}

type User {
  bio: String
  country: String
  email: String
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  name: String!

  """
  Filterable list of notifications for the logged in user.
  """
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter the response to include only notifications generated by certain actions (ex: commenting).
    """
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    includeSeen: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the response to include only notifications of a certaint type (ex: mentions).
    """
    notificationType: NotificationReason

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    subscriptionId: Int
  ): NotificationConnection
  organizations: [Organization!]!
  profileImagePath(size: Int = 56): String
  role: String!
  url: String
  username: String!
}

type Variant {
  description: String!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EvidenceItemConnection
  gene: Gene!
  id: Int!
  name: String!
}

"""
The connection type for Variant.
"""
type VariantConnection {
  """
  A list of edges.
  """
  edges: [VariantEdge]

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [Variant]

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Variant
}

enum VariantOrigin {
  COMMON_GERMLINE
  GERMLINE_OR_SOMATIC
  NA
  RARE_GERMLINE
  SOMATIC
  UNKNOWN
}