"""
Autogenerated input type of AcceptRevisions
"""
input AcceptRevisionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Body of an optional comment to attach to the revision on acceptance.
  """
  comment: String

  """
  A list of IDs of the Revisions to accept.
  """
  ids: [Int!]

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The ID of a revision set.
  """
  revisionSetId: ID
}

"""
Autogenerated return type of AcceptRevisions
"""
type AcceptRevisionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of  newly accepted Revisions.
  """
  revisions: [Revision!]!

  """
  A list of any revisions that were superseded by the acceptance of this one.
  """
  supersededRevisions: [Revision!]!
}

type AcmgCode {
  code: String!
  description: String!
  id: Int!
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  Text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The commentable to attach the comment to. Specified by ID and Type.
  """
  subject: CommentableInput!

  """
  Optional title for the comment.
  """
  title: String
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: Comment
}

"""
Autogenerated input type of AddDisease
"""
input AddDiseaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The DOID of the disease, if the disease is present in the Disease Ontology.
  """
  doid: Int

  """
  The name of the disease.
  """
  name: String!
}

"""
Autogenerated return type of AddDisease
"""
type AddDiseasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created disease.
  """
  disease: Disease!

  """
  True if the disease was newly created. False if the returned disease was already in the database.
  """
  new: Boolean!
}

"""
Autogenerated input type of AddDrug
"""
input AddDrugInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The name of the drug.
  """
  name: String!

  """
  The NCIt ID of the drug, if the drug is present in the NCIthesaurus.
  """
  ncitId: String
}

"""
Autogenerated return type of AddDrug
"""
type AddDrugPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created drug.
  """
  drug: Drug!

  """
  True if the drug was newly created. False if the returned drug was already in the database.
  """
  new: Boolean!
}

"""
Autogenerated input type of AddRemoteCitation
"""
input AddRemoteCitationInput {
  """
  The external id for the source to add.
  """
  citationId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The origin of the external source.
  """
  sourceType: SourceSource!
}

"""
Autogenerated return type of AddRemoteCitation
"""
type AddRemoteCitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The stubbed in record for the newly created source.
  """
  newSource: SourceStub!
}

"""
Autogenerated input type of AddVariant
"""
input AddVariantInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The CIViC ID of the Gene to which the new variant belongs.
  """
  geneId: Int!

  """
  The name of the variant to add.
  """
  name: String!
}

"""
Autogenerated return type of AddVariant
"""
type AddVariantPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created molecular profile for the new variant.
  """
  molecularProfile: MolecularProfile!

  """
  True if the variant was newly created. False if the returned variant was already in the database.
  """
  new: Boolean!

  """
  The newly created Variant.
  """
  variant: Variant!
}

type AdvancedSearchResult {
  permalinkId: String
  resultIds: [Int!]!
  searchEndpoint: String!
}

enum AmpLevel {
  NA
  TIER_III
  TIER_II_LEVEL_C
  TIER_II_LEVEL_D
  TIER_IV
  TIER_I_LEVEL_A
  TIER_I_LEVEL_B
}

enum AreaOfExpertise {
  CLINICAL_SCIENTIST
  PATIENT_ADVOCATE
  RESEARCH_SCIENTIST
}

type Assertion implements Commentable & EventOriginObject & EventSubject & Flaggable & WithRevisions {
  acceptanceEvent: Event
  acmgCodes: [AcmgCode!]!
  ampLevel: AmpLevel
  assertionDirection: AssertionDirection!
  assertionType: AssertionType!
  clingenCodes: [ClingenCode!]!
  clinicalSignificance: AssertionClinicalSignificance!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  disease: Disease
  drugInteractionType: DrugInteraction
  drugs: [Drug!]!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceItems: [EvidenceItem!]!
  evidenceItemsCount: Int!
  fdaCompanionTest: Boolean
  fdaCompanionTestLastUpdated: ISO8601DateTime
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  link: String!
  molecularProfile: MolecularProfile!
  name: String!
  nccnGuideline: NccnGuideline
  nccnGuidelineVersion: String
  phenotypes: [Phenotype!]!
  regulatoryApproval: Boolean
  regulatoryApprovalLastUpdated: ISO8601DateTime
  rejectionEvent: Event

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  status: EvidenceStatus!
  submissionEvent: Event!
  summary: String!
  variantOrigin: VariantOrigin!
}

enum AssertionClinicalSignificance {
  ADVERSE_RESPONSE
  BENIGN
  BETTER_OUTCOME
  LIKELY_BENIGN
  LIKELY_ONCOGENIC
  LIKELY_PATHOGENIC
  NA
  NEGATIVE
  ONCOGENIC
  PATHOGENIC
  POOR_OUTCOME
  POSITIVE
  REDUCED_SENSITIVITY
  RESISTANCE
  SENSITIVITYRESPONSE
  UNCERTAIN_SIGNIFICANCE
}

"""
The connection type for Assertion.
"""
type AssertionConnection {
  """
  A list of edges.
  """
  edges: [AssertionEdge!]!

  """
  A list of nodes.
  """
  nodes: [Assertion!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

enum AssertionDirection {
  DOES_NOT_SUPPORT
  SUPPORTS
}

"""
An edge in a connection.
"""
type AssertionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Assertion
}

"""
Fields on an Assertion that curators may propose revisions to.
"""
input AssertionFields {
  """
  List of CIViC IDs for the ACMG/AMP codes associated with this Assertion
  """
  acmgCodeIds: [Int!]!

  """
  The AMP/ASCO/CAP Category for this assertion.
  """
  ampLevel: NullableAmpLevelTypeInput!

  """
  The evidence direction for this Assertion.
  """
  assertionDirection: AssertionDirection!

  """
  The Type of the Assertion
  """
  assertionType: AssertionType!

  """
  List of CIViC IDs for the ClinGen/CGC/VICC codes associated with this Assertion
  """
  clingenCodeIds: [Int!]!

  """
  The Clinical Significance of the Assertion
  """
  clinicalSignificance: AssertionClinicalSignificance!

  """
  A detailed description of the Assertion including practice guidelines and approved tests.
  """
  description: NullableStringInput!

  """
  The ID of the disease (if applicable) for this Assertion
  """
  diseaseId: NullableIntInput!

  """
  List of IDs of CIViC Drug entries for this Assertion. An empty list indicates none.
  """
  drugIds: [Int!]!

  """
  Drug interaction type for cases where more than one drug ID is provided.
  """
  drugInteractionType: NullableDrugInteractionTypeInput!

  """
  IDs of evidence items that are included in this Assertion.
  """
  evidenceItemIds: [Int!]!

  """
  Is an FDA companion test available that pertains to this Assertion.
  """
  fdaCompanionTest: NullableBooleanInput!

  """
  Does the Assertion have FDA regulatory approval.
  """
  fdaRegulatoryApproval: NullableBooleanInput!

  """
  The ID of the Molecular Profile to which this Assertion belongs
  """
  molecularProfileId: Int!

  """
  The internal CIViC ID of the NCCN guideline associated with this Assertion
  """
  nccnGuidelineId: NullableIntInput!

  """
  The version of the NCCN Guideline specified
  """
  nccnGuidelineVersion: NullableStringInput!

  """
  List of IDs of CIViC Phenotype entries for this Assertion. An empty list indicates none.
  """
  phenotypeIds: [Int!]!

  """
  A brief single sentence statement summarizing the clinical significance of this Assertion.
  """
  summary: NullableStringInput!

  """
  The Variant Origin for this Assertion.
  """
  variantOrigin: VariantOrigin!
}

input AssertionSort {
  """
  Available columns for sorting
  """
  column: AssertionSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum AssertionSortColumns {
  AMP_LEVEL
  ASSERTION_DIRECTION
  ASSERTION_TYPE
  CLINICAL_SIGNIFICANCE
  DISEASE_NAME
  DRUG_NAME
  EVIDENCE_ITEMS_COUNT
  ID
  STATUS
  SUMMARY
}

enum AssertionType {
  DIAGNOSTIC
  ONCOGENIC
  PREDICTIVE
  PREDISPOSING
  PROGNOSTIC
}

enum BooleanOperator {
  AND
  OR
}

input BooleanSearchInput {
  value: Boolean!
}

type BrowseClinicalTrial {
  evidenceCount: Int!
  id: Int!
  link: String!
  name: String!
  nctId: String
  sourceCount: Int!
  url: String
}

"""
The connection type for BrowseClinicalTrial.
"""
type BrowseClinicalTrialConnection {
  """
  A list of edges.
  """
  edges: [BrowseClinicalTrialEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseClinicalTrial!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseClinicalTrialEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseClinicalTrial
}

type BrowseDisease {
  assertionCount: Int!
  diseaseUrl: String
  displayName: String!
  doid: String
  evidenceItemCount: Int!
  geneCount: Int!
  geneNames: [String!]!
  id: Int!
  link: String!
  name: String!
  variantCount: Int!
}

"""
The connection type for BrowseDisease.
"""
type BrowseDiseaseConnection {
  """
  A list of edges.
  """
  edges: [BrowseDiseaseEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseDisease!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseDiseaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseDisease
}

type BrowseDrug {
  assertionCount: Int!
  drugUrl: String
  evidenceCount: Int!
  id: Int!
  link: String!
  name: String!
  ncitId: String
}

"""
The connection type for BrowseDrug.
"""
type BrowseDrugConnection {
  """
  A list of edges.
  """
  edges: [BrowseDrugEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseDrug!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseDrugEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseDrug
}

type BrowseGene implements Flaggable {
  assertionCount: Int!
  description: String!
  diseases: [Disease!]
  drugs: [Drug!]
  entrezId: Int!
  evidenceItemCount: Int!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  geneAliases: [String!]
  id: Int!
  link: String!
  name: String!
  variantCount: Int!
}

"""
The connection type for BrowseGene.
"""
type BrowseGeneConnection {
  """
  A list of edges.
  """
  edges: [BrowseGeneEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseGene!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseGeneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseGene
}

type BrowseMolecularProfile {
  aliases: [MolecularProfileAlias!]!
  assertionCount: Int!
  diseases: [LinkableDisease!]!
  drugs: [LinkableDrug!]!
  evidenceItemCount: Int!
  evidenceScore: Float!
  genes: [LinkableGene!]!
  id: Int!
  link: String!
  name: String!
  variants: [LinkableVariant!]!
}

"""
The connection type for BrowseMolecularProfile.
"""
type BrowseMolecularProfileConnection {
  """
  A list of edges.
  """
  edges: [BrowseMolecularProfileEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseMolecularProfile!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseMolecularProfileEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseMolecularProfile
}

type BrowsePhenotype {
  assertionCount: Int!
  evidenceCount: Int!
  hpoId: String!
  id: Int!
  link: String!
  name: String!
  url: String!
}

"""
The connection type for BrowsePhenotype.
"""
type BrowsePhenotypeConnection {
  """
  A list of edges.
  """
  edges: [BrowsePhenotypeEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowsePhenotype!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowsePhenotypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowsePhenotype
}

type BrowseSource {
  authors: [String!]!
  citation: String!
  citationId: Int!
  clinicalTrials: [ClinicalTrial!]!
  displayType: String!
  evidenceItemCount: Int!
  id: Int!
  journal: String
  link: String!
  name: String
  publicationYear: Int
  sourceSuggestionCount: Int!
  sourceType: SourceSource!
  sourceUrl: String!
}

"""
The connection type for BrowseSource.
"""
type BrowseSourceConnection {
  """
  A list of edges.
  """
  edges: [BrowseSourceEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseSource!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseSourceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseSource
}

type BrowseVariant {
  aliases: [VariantAlias!]!
  diseases: [Disease!]!
  drugs: [Drug!]!
  geneId: Int!
  geneLink: String!
  geneName: String!
  id: Int!
  link: String!
  name: String!
}

"""
The connection type for BrowseVariant.
"""
type BrowseVariantConnection {
  """
  A list of edges.
  """
  edges: [BrowseVariantEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseVariant!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseVariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseVariant
}

type BrowseVariantGroup {
  evidenceItemCount: Int!
  geneNames: [String!]!
  id: Int!
  link: String!
  name: String!
  variantCount: Int!
  variantNames: [String!]!
}

"""
The connection type for BrowseVariantGroup.
"""
type BrowseVariantGroupConnection {
  """
  A list of edges.
  """
  edges: [BrowseVariantGroupEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseVariantGroup!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseVariantGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseVariantGroup
}

type BrowseVariantType {
  id: Int!
  link: String!
  name: String!
  soid: String!
  url: String
  variantCount: Int!
}

"""
The connection type for BrowseVariantType.
"""
type BrowseVariantTypeConnection {
  """
  A list of edges.
  """
  edges: [BrowseVariantTypeEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseVariantType!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseVariantTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseVariantType
}

"""
Counts of CIViC activity over time, used for the homepage
"""
type CivicTimepointStats {
  assertions: TimePointCounts!
  comments: TimePointCounts!
  diseases: TimePointCounts!
  drugs: TimePointCounts!
  evidenceItems: TimePointCounts!
  genes: TimePointCounts!
  molecularProfiles: TimePointCounts!
  revisions: TimePointCounts!
  sources: TimePointCounts!
  users: TimePointCounts!
  variants: TimePointCounts!
}

type ClingenCode {
  code: String!
  description: String!
  id: Int!
}

type ClinicalTrial {
  description: String!
  id: Int!
  link: String!
  name: String!
  nctId: String!
  url: String
}

input ClinicalTrialSort {
  """
  Available columns for sorting
  """
  column: ClinicalTrialSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum ClinicalTrialSortColumns {
  EVIDENCE_ITEM_COUNT
  NAME
  NCT_ID
  SOURCE_COUNT
}

"""
An input object representing possible ClinVar ID states.
You may specify either one or more Integer IDs OR either none found or not applicable.
"""
input ClinvarInput {
  """
  The ClinVar ID(s)
  """
  ids: [Int!]
  noneFound: Boolean
  notApplicable: Boolean
}

type Coi {
  coiPresent: Boolean!
  coiStatement: String
  coiStatus: CoiStatus!
  createdAt: ISO8601DateTime
  expiresAt: ISO8601DateTime!
  id: Int!
}

enum CoiStatus {
  CONFLICT
  EXPIRED
  MISSING
  VALID
}

type Comment implements EventOriginObject {
  comment: String!
  commentable: Commentable!
  commenter: User!
  createdAt: ISO8601DateTime!
  creationEvent: Event
  id: Int!
  link: String!
  name: String!
  parsedComment: [CommentBodySegment!]!
  title: String
}

"""
Segment of a comment that can either be text or an object to be rendered as a tag
"""
union CommentBodySegment = CommentTagSegment | CommentTextSegment | User

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge!]!

  """
  List of entities mentioned in this comment thread.
  """
  mentionedEntities: [CommentTagSegment!]!

  """
  List of roles mentioned in this comment thread
  """
  mentionedRoles: [CommentTagSegment!]!

  """
  List of users mentioned in this comment thread.
  """
  mentionedUsers: [User!]!

  """
  A list of nodes.
  """
  nodes: [Comment!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  When filtered on a subject, the total number of comments for that subject,
  irregardless of other filters. Returns null when there is no subject.
  """
  unfilteredCountForSubject: Int

  """
  List of all users that have commented on this entity.
  """
  uniqueCommenters: [User!]!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

type CommentTagSegment {
  deprecated: Boolean
  displayName: String!
  entityId: Int!
  link: String!
  revisionsetId: String
  status: EvidenceStatus
  tagType: TaggableEntity!
}

type CommentTextSegment {
  text: String!
}

"""
A CIViC entity that can have comments on it.
"""
interface Commentable {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  id: Int!
  lastCommentEvent: Event
  link: String!
  name: String!
}

enum CommentableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  MOLECULAR_PROFILE
  SOURCE
  VARIANT
  VARIANT_GROUP
}

"""
Entity to comment on
"""
input CommentableInput {
  """
  The type of the entity to comment on.
  """
  entityType: CommentableEntities!

  """
  ID of the entity to comment on.
  """
  id: Int!
}

"""
A user with all the unique kinds of actions they've performed on a given entity
"""
type ContributingUser {
  lastActionDate: ISO8601DateTime!
  totalActionCount: Int!
  uniqueActions: [Contribution!]!
  user: User!
}

type ContributingUsersSummary {
  curators: [ContributingUser!]!
  editors: [ContributingUser!]!
}

type Contribution {
  action: EventAction!
  count: Int!
}

type Coordinate {
  chromosome: String
  representativeTranscript: String
  start: Int
  stop: Int
}

input CoordinateInput {
  chromosome: String
  representativeTranscript: String
  start: Int
  stop: Int
}

type Country {
  id: Int!
  iso: String!
  name: String!
}

"""
Autogenerated input type of CreateMolecularProfile
"""
input CreateMolecularProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Representation of the constituent parts of the Molecular Profile along with the logic used to combine them.
  """
  structure: MolecularProfileComponentInput!
}

"""
Autogenerated return type of CreateMolecularProfile
"""
type CreateMolecularProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created (or already existing) Molecular Profile.
  """
  molecularProfile: MolecularProfile!
}

type DataRelease {
  acceptedAndSubmittedVariantsVcf: DownloadableFile
  acceptedVariantsVcf: DownloadableFile
  assertionTsv: DownloadableFile
  evidenceTsv: DownloadableFile
  geneTsv: DownloadableFile
  molecularProfileTsv: DownloadableFile
  name: String!
  variantGroupTsv: DownloadableFile
  variantTsv: DownloadableFile
}

input DateSort {
  """
  Value to sort by.
  """
  column: DateSortColumns!

  """
  Sort direction.
  """
  direction: SortDirection!
}

enum DateSortColumns {
  CREATED
  LAST_MODIFIED
}

"""
Autogenerated input type of DeprecateVariant
"""
input DeprecateVariantInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text giving more context for deprecation this variant.
  """
  comment: String!

  """
  The reason for deprecation this variant.
  """
  deprecationReason: DeprecationReason!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The CIViC ID of the variant to deprecate.
  """
  variantId: Int!
}

"""
Autogenerated return type of DeprecateVariant
"""
type DeprecateVariantPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The molecular profiles linked to this variant that weren't already deprecated
  and have been newly deprecated by running this mutation.
  """
  newlyDeprecatedMolecularProfiles: [MolecularProfile!]

  """
  The deprecated Variant.
  """
  variant: Variant
}

enum DeprecationReason {
  DUPLICATE
  INVALID
  OTHER
}

type Disease {
  diseaseAliases: [String!]!
  diseaseUrl: String
  displayName: String!
  doid: Int
  id: Int!
  link: String!
  name: String!
}

type DiseasePopover {
  assertionCount: Int!
  diseaseAliases: [String!]!
  diseaseUrl: String
  displayName: String!
  doid: Int
  evidenceItemCount: Int!
  id: Int!
  link: String!
  name: String!
  variantCount: Int!
}

input DiseasesSort {
  """
  Available columns for sorting
  """
  column: DiseasesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum DiseasesSortColumns {
  ASSERTION_COUNT
  DOID
  EVIDENCE_ITEM_COUNT
  GENE_COUNT
  NAME
  VARIANT_COUNT
}

type DownloadableFile {
  filename: String!
  path: String!
}

type Drug {
  drugAliases: [String!]!
  drugUrl: String
  id: Int!
  link: String!
  name: String!
  ncitId: String
}

enum DrugInteraction {
  COMBINATION
  SEQUENTIAL
  SUBSTITUTES
}

type DrugPopover {
  assertionCount: Int!
  drugAliases: [String!]!
  drugUrl: String
  evidenceItemCount: Int!
  id: Int!
  link: String!
  name: String!
  ncitId: String
}

input DrugSort {
  """
  Available columns for sorting
  """
  column: DrugSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum DrugSortColumns {
  ASSERTION_COUNT
  EVIDENCE_ITEM_COUNT
  NAME
  NCIT_ID
}

"""
Autogenerated input type of EditUser
"""
input EditUserInput {
  """
  The user's area of expertise
  """
  areaOfExpertise: NullableAreaOfExpertiseTypeInput!

  """
  A short biography describing the user's interests, accomplishments,
  associations, and/or anything else about they would like to share with the
  CIViC community.
  """
  bio: NullableStringInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The internal CIViC ID of the country the user resides or studies in.
  """
  countryId: NullableIntInput!

  """
  The user's email address
  """
  email: String!

  """
  The user's Facebook profile handle
  """
  facebookProfile: NullableStringInput!

  """
  The user's LinkedIn username
  """
  linkedinProfile: NullableStringInput!

  """
  The user's full name
  """
  name: NullableStringInput!

  """
  The the user's ORCID (Open Research and Contributor ID) identifier
  """
  orcid: NullableIDInput!

  """
  The user's twitter handle
  """
  twitterHandle: NullableStringInput!

  """
  The user's personal website URL, omitting the https:// protocol part
  """
  url: NullableStringInput!

  """
  The user's desired username
  """
  username: String!
}

"""
Autogenerated return type of EditUser
"""
type EditUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Event {
  action: EventAction!
  createdAt: ISO8601DateTime!
  id: Int!
  organization: Organization
  originatingObject: EventOriginObject
  originatingUser: User!
  subject: EventSubject
}

enum EventAction {
  ACCEPTED
  ASSERTION_ACCEPTED
  ASSERTION_REJECTED
  ASSERTION_REVERTED
  ASSERTION_SUBMITTED
  COMMENTED
  CURATED_SOURCE_SUGGESTION
  DEPRECATED_MOLECULAR_PROFILE
  DEPRECATED_VARIANT
  FLAGGED
  FLAG_RESOLVED
  PUBLICATION_SUGGESTED
  REJECTED
  REJECTED_SOURCE_SUGGESTION
  REQUEUED_SOURCE_SUGGESTION
  REVERTED
  REVISION_ACCEPTED
  REVISION_REJECTED
  REVISION_SUGGESTED
  REVISION_SUPERSEDED
  SUBMITTED
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!

  """
  List of event types that have occured on this entity.
  """
  eventTypes: [EventAction!]!

  """
  A list of nodes.
  """
  nodes: [Event!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  List of all organizations who are involved in this event stream.
  """
  participatingOrganizations: [Organization!]!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  When filtered on a subject, user, or organization, the total number of events
  for that subject/user/organization, irregardless of other filters. Returns
  null when there is no subject, user, or organization.
  """
  unfilteredCount: Int!

  """
  List of all users that have generated an event on the subject entity.
  """
  uniqueParticipants: [User!]!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

"""
The context of an event feed, i.e. what is the root subject of the feed. This
option is a no-op when accessing events via a parent.
"""
enum EventFeedMode {
  ORGANIZATION
  SUBJECT
  UNSCOPED
  USER
}

"""
The originating object for an event.
This is useful when the subject of an event is not the actual origin of the event.
For instance when you suggest a revision, the subject of the Event will be the entity being revised,
while the originating object will be the Revision itself.
"""
interface EventOriginObject {
  id: Int!
  link: String!
  name: String!
}

"""
The subject of an event log event.
"""
interface EventSubject {
  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  id: Int!
  link: String!
  name: String!
}

"""
An event subject paired with a count of how many times that subject has appeared
"""
type EventSubjectWithCount {
  occuranceCount: Int!
  subject: EventSubject
}

enum EvidenceClinicalSignificance {
  ADVERSE_RESPONSE
  BENIGN
  BETTER_OUTCOME
  DOMINANT_NEGATIVE
  GAIN_OF_FUNCTION
  LIKELY_BENIGN
  LIKELY_PATHOGENIC
  LOSS_OF_FUNCTION
  NA
  NEGATIVE
  NEOMORPHIC
  ONCOGENICITY
  PATHOGENIC
  POOR_OUTCOME
  POSITIVE
  PREDISPOSITION
  PROTECTIVENESS
  REDUCED_SENSITIVITY
  RESISTANCE
  SENSITIVITYRESPONSE
  UNALTERED_FUNCTION
  UNCERTAIN_SIGNIFICANCE
  UNKNOWN
}

enum EvidenceDirection {
  DOES_NOT_SUPPORT
  NA
  SUPPORTS
}

type EvidenceItem implements Commentable & EventOriginObject & EventSubject & Flaggable & WithRevisions {
  acceptanceEvent: Event
  assertions: [Assertion!]!
  clinicalSignificance: EvidenceClinicalSignificance!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  disease: Disease
  drugInteractionType: DrugInteraction
  drugs: [Drug!]!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceDirection: EvidenceDirection!
  evidenceLevel: EvidenceLevel!
  evidenceRating: Int
  evidenceType: EvidenceType!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  link: String!
  molecularProfile: MolecularProfile!
  name: String!
  phenotypes: [Phenotype!]!
  rejectionEvent: Event

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  source: Source!
  status: EvidenceStatus!
  submissionEvent: Event!
  variant: Variant!
  variantHgvs: String!
  variantOrigin: VariantOrigin!
}

"""
The connection type for EvidenceItem.
"""
type EvidenceItemConnection {
  """
  A list of edges.
  """
  edges: [EvidenceItemEdge!]!

  """
  A list of nodes.
  """
  nodes: [EvidenceItem!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EvidenceItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EvidenceItem
}

"""
Fields on an EvidenceItem that curators may propose revisions to.
"""
input EvidenceItemFields {
  """
  The Clinical Significance of the EvidenceItem
  """
  clinicalSignificance: EvidenceClinicalSignificance!

  """
  The Evidence Items's description/summary text.
  """
  description: NullableStringInput!

  """
  The ID of the disease (if applicable) for this EvidenceItem
  """
  diseaseId: NullableIntInput!

  """
  List of IDs of CIViC Drug entries for this EvidenceItem. An empty list indicates none.
  """
  drugIds: [Int!]!

  """
  Drug interaction type for cases where more than one drug ID is provided.
  """
  drugInteractionType: NullableDrugInteractionTypeInput!

  """
  The evidence direction for this EvidenceItem.
  """
  evidenceDirection: EvidenceDirection!

  """
  The evidence level of the EvidenceItem
  """
  evidenceLevel: EvidenceLevel!

  """
  The Type of the EvidenceItem
  """
  evidenceType: EvidenceType!

  """
  The ID of the Molecular Profile to which this EvidenceItem belongs
  """
  molecularProfileId: Int!

  """
  List of IDs of CIViC Phenotype entries for this EvidenceItem. An empty list indicates none.
  """
  phenotypeIds: [Int!]!

  """
  The rating for this EvidenceItem
  """
  rating: Int!

  """
  The ID of the Source from which this EvidenceItem was curated.
  """
  sourceId: Int!

  """
  The Variant Origin for this EvidenceItem.
  """
  variantOrigin: VariantOrigin!
}

type EvidenceItemsByStatus {
  acceptedCount: Int!
  molecularProfileId: Int!
  rejectedCount: Int!
  submittedCount: Int!
}

enum EvidenceLevel {
  A
  B
  C
  D
  E
}

input EvidenceSort {
  """
  Available columns for sorting
  """
  column: EvidenceSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum EvidenceSortColumns {
  CLINICAL_SIGNIFICANCE
  DESCRIPTION
  DISEASE_NAME
  DRUG_NAME
  EVIDENCE_DIRECTION
  EVIDENCE_LEVEL
  EVIDENCE_RATING
  EVIDENCE_TYPE
  ID
  STATUS
  VARIANT_ORIGIN
}

enum EvidenceStatus {
  ACCEPTED
  REJECTED
  SUBMITTED
}

enum EvidenceStatusFilter {
  ACCEPTED
  ALL
  REJECTED
  SUBMITTED
}

enum EvidenceType {
  DIAGNOSTIC
  FUNCTIONAL
  ONCOGENIC
  PREDICTIVE
  PREDISPOSING
  PROGNOSTIC
}

type FieldName {
  """
  The user facing representation of the field name.
  """
  displayName: String!

  """
  The internal server representation of the field name.
  """
  name: String!
}

type FieldValidationError {
  error: String!
  fieldName: String!
}

type Flag implements Commentable & EventOriginObject {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  createdAt: ISO8601DateTime!
  flaggable: Flaggable!
  flaggingUser: User!
  id: Int!
  lastCommentEvent: Event
  link: String!
  name: String!
  openComment: Comment!
  resolutionComment: Comment
  resolvedAt: ISO8601DateTime
  resolvingUser: User
  state: FlagState!
}

"""
The connection type for Flag.
"""
type FlagConnection {
  """
  A list of edges.
  """
  edges: [FlagEdge!]!

  """
  A list of nodes.
  """
  nodes: [Flag!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  When filtered on a subject, the total number of flags for that subject,
  irregardless of other filters. Returns null when there is no subject.
  """
  unfilteredCountForSubject: Int

  """
  List of all users that have flagged this entity.
  """
  uniqueFlaggingUsers: [User!]!

  """
  List of all users that have resolved a flag on this entity.
  """
  uniqueResolvingUsers: [User!]
}

"""
An edge in a connection.
"""
type FlagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Flag
}

"""
Autogenerated input type of FlagEntity
"""
input FlagEntityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the problem you observed with this entity.
  """
  comment: String!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The entity to flag, specified by its ID and type.
  """
  subject: FlaggableInput!
}

"""
Autogenerated return type of FlagEntity
"""
type FlagEntityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Flag.
  """
  flag: Flag
}

enum FlagState {
  OPEN
  RESOLVED
}

"""
A CIViC entity that can be flagged for editor attention.
"""
interface Flaggable {
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  link: String!
  name: String!
}

"""
Enumeration of all entities in CIViC that can be flagged.
"""
enum FlaggableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  MOLECULAR_PROFILE
  VARIANT
  VARIANT_GROUP
}

"""
Entity to flag
"""
input FlaggableInput {
  """
  The type of the entity to flag.
  """
  entityType: FlaggableEntities!

  """
  The ID of the entity.
  """
  id: Int!
}

type Gene implements Commentable & EventSubject & Flaggable & MolecularProfileComponent & WithRevisions {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  entrezId: Int!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  geneAliases: [String!]!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  link: String!
  myGeneInfoDetails: JSON
  name: String!
  officialName: String!

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  sources: [Source!]!

  """
  List and filter variants.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Left anchored filtering for variant name and aliases.
    """
    name: String
  ): VariantConnection!
}

"""
The connection type for Gene.
"""
type GeneConnection {
  """
  A list of edges.
  """
  edges: [GeneEdge!]!

  """
  A list of nodes.
  """
  nodes: [Gene!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GeneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Gene
}

"""
Fields on a Gene that curators may propose revisions to.
"""
input GeneFields {
  """
  The Gene's description/summary text.
  """
  description: NullableStringInput!

  """
  Source IDs cited by the Gene's summary.
  """
  sourceIds: [Int!]!
}

input GeneSearchFilter {
  alias: StringSearchInput
  booleanOperator: BooleanOperator
  description: StringSearchInput
  entrezId: IntSearchInput
  entrezSymbol: StringSearchInput
  hasAssertion: BooleanSearchInput
  id: IntSearchInput
  openRevisionCount: IntSearchInput
  subFilters: [GeneSearchFilter!]
}

input GenesSort {
  """
  Available columns for sorting
  """
  column: GenesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum GenesSortColumns {
  assertionCount
  diseaseName
  drugName
  entrezSymbol
  evidenceItemCount
  geneAlias
  variantCount
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

input IntSearchInput {
  comparisonOperator: IntSearchOperator!
  value: Int!
}

enum IntSearchOperator {
  """
  Equal To
  """
  EQ
  GE
  GT
  LE
  LT
  NE
}

"""
Represents untyped JSON
"""
scalar JSON

type LinkableDisease {
  id: Int!
  link: String!
  name: String!
}

type LinkableDrug {
  id: Int!
  link: String!
  name: String!
}

type LinkableGene {
  id: Int!
  link: String!
  name: String!
}

type LinkableVariant {
  id: Int!
  link: String!
  name: String!
}

type LinkoutData {
  currentValue: ModeratedField!
  diffValue: ModeratedFieldDiff!
  name: String!
  suggestedValue: ModeratedField!
}

"""
Autogenerated input type of ModerateAssertion
"""
input ModerateAssertionInput {
  """
  ID of the Assertion to moderate
  """
  assertionId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The desired status of the Assertion
  """
  newStatus: EvidenceStatus!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of ModerateAssertion
"""
type ModerateAssertionPayload {
  """
  The moderated Assertion
  """
  assertion: Assertion!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of ModerateEvidenceItem
"""
input ModerateEvidenceItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the Evidence Item to moderate
  """
  evidenceItemId: Int!

  """
  The desired status of the Evidence Item
  """
  newStatus: EvidenceStatus!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of ModerateEvidenceItem
"""
type ModerateEvidenceItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The moderated Evidence Item
  """
  evidenceItem: EvidenceItem!
}

"""
Enumeration of all moderated CIViC entities.
"""
enum ModeratedEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  MOLECULAR_PROFILE
  VARIANT
  VARIANT_GROUP
}

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedField = ObjectField | ScalarField

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedFieldDiff = ObjectFieldDiff | ScalarFieldDiff

"""
Entity to moderate.
"""
input ModeratedInput {
  """
  Type of moderated entity.
  """
  entityType: ModeratedEntities!

  """
  ID of moderated entity.
  """
  id: Int!
}

type ModeratedObjectField {
  deleted: Boolean!
  displayName: String
  displayType: String
  entityType: String!
  id: Int!
  link: String
}

type MolecularProfile implements Commentable & EventOriginObject & EventSubject & Flaggable & WithRevisions {
  """
  The collection of assertions associated with this molecular profile.
  """
  assertions: [Assertion!]!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  deprecated: Boolean!
  deprecatedVariants: [Variant!]!
  deprecationEvent: Event
  description: String

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceCountsByStatus: EvidenceItemsByStatus!

  """
  The collection of evidence items associated with this molecular profile.
  """
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EvidenceItemConnection!
  evidenceScore: Float!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  link: String!
  molecularProfileAliases: [String!]!

  """
  The human readable name of this profile, including gene and variant names.
  """
  name: String!

  """
  The profile name with its constituent parts as objects, suitable for building tags.
  """
  parsedName: [MolecularProfileSegment!]!

  """
  The profile name as stored, with ids rather than names.
  """
  rawName: String!

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  sources: [Source!]!

  """
  The collection of variants included in this molecular profile. Please note the name for their relation to each other.
  """
  variants: [Variant!]!
}

type MolecularProfileAlias {
  name: String!
}

"""
A taggable/linkable component of a molecular profile
"""
interface MolecularProfileComponent {
  id: Int!
  link: String!
  name: String!
}

input MolecularProfileComponentInput {
  """
  Boolean operation used to combined the components into a Molecular Profile.
  """
  booleanOperator: BooleanOperator

  """
  One or more complex (multi-Variant) components that make up the Molecular Profile.
  """
  complexComponents: [MolecularProfileComponentInput!]

  """
  One or more single Variants that make up the Molecular Profile.
  """
  variantComponents: [VariantComponent!]
}

"""
The connection type for MolecularProfile.
"""
type MolecularProfileConnection {
  """
  A list of edges.
  """
  edges: [MolecularProfileEdge!]!

  """
  A list of nodes.
  """
  nodes: [MolecularProfile!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

enum MolecularProfileDisplayFilter {
  """
  Display all molecular profiles regardless of attached evidence status.
  """
  ALL

  """
  Display only molecular profiles which have at least one accepted evidence item.
  """
  WITH_ACCEPTED

  """
  Display only molecular profiles which have evidence in either an accepted or submitted state.
  """
  WITH_ACCEPTED_OR_SUBMITTED

  """
  Display molecular profiles which have at least one submited evidence item.
  """
  WITH_SUBMITTED
}

"""
An edge in a connection.
"""
type MolecularProfileEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MolecularProfile
}

"""
Fields on a MolecularProfile that curators may propose revisions to.
"""
input MolecularProfileFields {
  """
  List of aliases or alternate names for the MolecularProfile.
  """
  aliases: [String!]!

  """
  The MolecularProfile's description/summary text.
  """
  description: NullableStringInput!

  """
  Source IDs cited by the MolecularProfile's summary.
  """
  sourceIds: [Int!]!
}

type MolecularProfileNamePreview {
  deprecatedVariants: [Variant!]!

  """
  The already existing MP matching this name, if it exists
  """
  existingMolecularProfile: MolecularProfile
  segments: [MolecularProfileSegment!]!
}

"""
A segment of a molecular profile. Either a string representing a boolean
operator or a tag component representing a gene or variant
"""
union MolecularProfileSegment = Gene | MolecularProfileTextSegment | Variant

type MolecularProfileTextSegment {
  text: String!
}

input MolecularProfilesSort {
  """
  Available columns for sorting
  """
  column: MolecularProfilesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum MolecularProfilesSortColumns {
  assertionCount
  evidenceItemCount
  evidenceScore
}

type Mutation {
  """
  Accept multiple revisions by ID. The accepting user must be an editor with a
  valid conflict of interest statement on file and the revisions must not be
  their own. The revisions must be for the same subject. The revisions may not
  conflict, i.e. be for the same field.
  """
  acceptRevisions(
    """
    Parameters for AcceptRevisions
    """
    input: AcceptRevisionsInput!
  ): AcceptRevisionsPayload

  """
  Add a comment to any commentable entity.
  """
  addComment(
    """
    Parameters for AddComment
    """
    input: AddCommentInput!
  ): AddCommentPayload

  """
  Add a new disease to the database.
  """
  addDisease(
    """
    Parameters for AddDisease
    """
    input: AddDiseaseInput!
  ): AddDiseasePayload

  """
  Add a new drug to the database.
  """
  addDrug(
    """
    Parameters for AddDrug
    """
    input: AddDrugInput!
  ): AddDrugPayload

  """
  Add a stub record for an external source that is not yet in CIViC.
  This is for adding a new Source inline while performing other curation activities
  such as adding new evidence items and is distinct from suggesting a source for curation.
  """
  addRemoteCitation(
    """
    Parameters for AddRemoteCitation
    """
    input: AddRemoteCitationInput!
  ): AddRemoteCitationPayload

  """
  Add a new Variant to the database.
  """
  addVariant(
    """
    Parameters for AddVariant
    """
    input: AddVariantInput!
  ): AddVariantPayload

  """
  Create a new Molecular Profile in order to attach Evidence Items to it.
  """
  createMolecularProfile(
    """
    Parameters for CreateMolecularProfile
    """
    input: CreateMolecularProfileInput!
  ): CreateMolecularProfilePayload

  """
  Deprecate a variant to prevent it from being used in the future and implicitly
  deprecate all the molecular profiles linked to this variant.
  """
  deprecateVariant(
    """
    Parameters for DeprecateVariant
    """
    input: DeprecateVariantInput!
  ): DeprecateVariantPayload

  """
  Updated currently logged in Users's profile
  """
  editUser(
    """
    Parameters for EditUser
    """
    input: EditUserInput!
  ): EditUserPayload

  """
  Flag an entity to signal to the editorial team that you believe there is an issue with it.
  """
  flagEntity(
    """
    Parameters for FlagEntity
    """
    input: FlagEntityInput!
  ): FlagEntityPayload

  """
  Perform moderation actions on an assertion such as accepting, rejecting, or reverting.
  """
  moderateAssertion(
    """
    Parameters for ModerateAssertion
    """
    input: ModerateAssertionInput!
  ): ModerateAssertionPayload

  """
  Perform moderation actions on an evidence item such as accepting, rejecting, or reverting.
  """
  moderateEvidenceItem(
    """
    Parameters for ModerateEvidenceItem
    """
    input: ModerateEvidenceItemInput!
  ): ModerateEvidenceItemPayload

  """
  Reject one or more revisions by ID or revision set ID. Any user may reject a
  Revision that they submitted themselves. Otherwise, the rejecting user must be
  an editor with valid conflict of interest statement on file.
  """
  rejectRevisions(
    """
    Parameters for RejectRevisions
    """
    input: RejectRevisionsInput!
  ): RejectRevisionsPayload

  """
  Resolve a flag on a CIViC entity indicating that it was either erronously flagged or the issue has been resolved.
  Any user may resolve their own flag however only editors with valid conflict
  of interest statements can resolve other flags.
  """
  resolveFlag(
    """
    Parameters for ResolveFlag
    """
    input: ResolveFlagInput!
  ): ResolveFlagPayload

  """
  Propose adding a new Assertion to the CIViC database.
  """
  submitAssertion(
    """
    Parameters for SubmitAssertion
    """
    input: SubmitAssertionInput!
  ): SubmitAssertionPayload

  """
  Propose adding a new EvidenceItem to the CIViC database.
  """
  submitEvidence(
    """
    Parameters for SubmitEvidenceItem
    """
    input: SubmitEvidenceItemInput!
  ): SubmitEvidenceItemPayload

  """
  Create a new variant group.
  """
  submitVariantGroup(
    """
    Parameters for SubmitVariantGroup
    """
    input: SubmitVariantGroupInput!
  ): SubmitVariantGroupPayload

  """
  Subscribe to a CIViC entity in order to receive notifications about it.
  """
  subscribe(
    """
    Parameters for Subscribe
    """
    input: SubscribeInput!
  ): SubscribePayload

  """
  Suggest a Revision to an Assertion entity.
  """
  suggestAssertionRevision(
    """
    Parameters for SuggestAssertionRevision
    """
    input: SuggestAssertionRevisionInput!
  ): SuggestAssertionRevisionPayload

  """
  Suggest a Revision to an EvidenceItem entity.
  """
  suggestEvidenceItemRevision(
    """
    Parameters for SuggestEvidenceItemRevision
    """
    input: SuggestEvidenceItemRevisionInput!
  ): SuggestEvidenceItemRevisionPayload

  """
  Suggest a Revision to a Gene entity.
  """
  suggestGeneRevision(
    """
    Parameters for SuggestGeneRevision
    """
    input: SuggestGeneRevisionInput!
  ): SuggestGeneRevisionPayload

  """
  Suggest a Revision to a MolecularProfile entity.
  """
  suggestMolecularProfileRevision(
    """
    Parameters for SuggestMolecularProfileRevision
    """
    input: SuggestMolecularProfileRevisionInput!
  ): SuggestMolecularProfileRevisionPayload

  """
  Suggest a source for curation in CIViC.
  """
  suggestSource(
    """
    Parameters for SuggestSource
    """
    input: SuggestSourceInput!
  ): SuggestSourcePayload

  """
  Suggested a Revision to a Variant Group entity
  """
  suggestVariantGroupRevision(
    """
    Parameters for SuggestVariantGroupRevision
    """
    input: SuggestVariantGroupRevisionInput!
  ): SuggestVariantGroupRevisionPayload

  """
  Suggest a Revision to a Variant entity.
  """
  suggestVariantRevision(
    """
    Parameters for SuggestVariantRevision
    """
    input: SuggestVariantRevisionInput!
  ): SuggestVariantRevisionPayload

  """
  Unsubscribe from a CIViC entity to stop receiving notifications about it.
  """
  unsubscribe(
    """
    Parameters for Unsubscribe
    """
    input: UnsubscribeInput!
  ): UnsubscribePayload

  """
  Update the currentlly logged in User's Conflict of Interest statement
  """
  updateCoi(
    """
    Parameters for UpdateCoi
    """
    input: UpdateCoiInput!
  ): UpdateCoiPayload

  """
  Mark one or more notifications as read/unread. The notification IDs provided must belong to the requesting user.
  """
  updateNotificationStatus(
    """
    Parameters for UpdateNotificationStatus
    """
    input: UpdateNotificationStatusInput!
  ): UpdateNotificationStatusPayload

  """
  Update the status of a SourceSuggestion by ID. The user updating the SourceSuggestion must be signed in.
  """
  updateSourceSuggestionStatus(
    """
    Parameters for UpdateSourceSuggestionStatus
    """
    input: UpdateSourceSuggestionStatusInput!
  ): UpdateSourceSuggestionStatusPayload
}

type MyVariantInfo {
  caddConsequence: [String!]!
  caddDetail: [String!]!
  caddScore: Float
  clinvarClinicalSignificance: [String!]!
  clinvarHgvsCoding: [String!]!
  clinvarHgvsGenomic: [String!]!
  clinvarHgvsNonCoding: [String!]!
  clinvarHgvsProtein: [String!]!
  clinvarId: Int
  clinvarOmim: String
  cosmicId: String
  dbnsfpInterproDomain: [String!]!
  dbsnpRsid: String
  eglClass: String
  eglHgvs: [String!]!
  eglProtein: String
  eglTranscript: String
  exacAlleleCount: Int
  exacAlleleFrequency: Float
  exacAlleleNumber: Int
  fathmmMklPrediction: String
  fathmmMklScore: Float
  fathmmPrediction: [String!]!
  fathmmScore: [Float!]!
  fitconsScore: Float
  gerp: Float
  gnomadExomeAlleleCount: Int
  gnomadExomeAlleleFrequency: Float
  gnomadExomeAlleleNumber: Int
  gnomadExomeFilter: String
  gnomadGenomeAlleleCount: Int
  gnomadGenomeAlleleFrequency: Float
  gnomadGenomeAlleleNumber: Int
  gnomadGenomeFilter: String
  lrtPrediction: String
  lrtScore: Float
  metalrPrediction: String
  metalrScore: Float
  metasvmPrediction: String
  metasvmScore: Float
  mutationassessorPrediction: [String!]!
  mutationassessorScore: [Float!]!
  mutationtasterPrediction: [String!]!
  mutationtasterScore: [Float!]!
  myVariantInfoId: String!
  phastcons100way: Float
  phastcons30way: Float
  phyloP100way: Float
  phyloP30way: Float
  polyphen2HdivPrediction: [String!]!
  polyphen2HdivScore: [Float!]!
  polyphen2HvarPrediction: [String!]!
  polyphen2HvarScore: [Float!]!
  proveanPrediction: [String!]!
  proveanScore: [Float!]!
  revelScore: Float
  siftPrediction: [String!]!
  siftScore: [Float!]!
  siphy: Float
  snpeffSnpEffect: [String!]!
  snpeffSnpImpact: [String!]!
}

type NccnGuideline {
  id: Int!
  name: String!
}

type Notification {
  createdAt: ISO8601DateTime!
  event: Event!
  id: Int!
  notifiedUser: User!
  originatingUser: User!
  seen: Boolean!
  subscription: Subscription
  type: NotificationReason!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge!]!

  """
  List of event types that have occured on this entity.
  """
  eventTypes: [EventAction!]!

  """
  Users who have mentioned you.
  """
  mentioningUsers: [User!]!

  """
  A list of nodes.
  """
  nodes: [Notification!]!

  """
  List of subjects of the notifications in the stream
  """
  notificationSubjects: [EventSubjectWithCount!]!

  """
  List of all organizations who are involved in this notification stream.
  """
  organizations: [Organization!]!

  """
  Users who have performed an action (other than a mention) that created a notification.
  """
  originatingUsers: [User!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  Count of unread notifications
  """
  unreadCount: Int!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

enum NotificationReason {
  MENTION
  SUBSCRIPTION
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableAmpLevelTypeInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: AmpLevel
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableAreaOfExpertiseTypeInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: AreaOfExpertise
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableBooleanInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: Boolean
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableDrugInteractionTypeInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: DrugInteraction
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableIDInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: ID
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableIntInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: Int
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableReferenceBuildTypeInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: ReferenceBuild
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableStringInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: String
}

type ObjectField {
  objects: [ModeratedObjectField!]!
}

type ObjectFieldDiff {
  addedObjects: [ModeratedObjectField!]!
  currentObjects: [ModeratedObjectField!]!
  keptObjects: [ModeratedObjectField!]!
  removedObjects: [ModeratedObjectField!]!
  suggestedObjects: [ModeratedObjectField!]!
}

type Organization {
  description: String!
  eventCount: Int!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  memberCount: Int!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  mostRecentEvent: Event
  name: String!
  orgAndSuborgsStatsHash: Stats!
  orgStatsHash: Stats!
  profileImagePath(size: Int = 56): String
  subGroups: [Organization!]!
  url: String!
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge!]!

  """
  A list of nodes.
  """
  nodes: [Organization!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

"""
Filter on organization id and whether or not to include the organization's subgroups
"""
input OrganizationFilter {
  """
  The organization ID.
  """
  id: Int

  """
  Whether or not to include the organization's subgroup.
  """
  includeSubgroups: Boolean = false

  """
  The organization name.
  """
  name: String
}

input OrganizationSort {
  """
  Available columns for sorting
  """
  column: OrganizationSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum OrganizationSortColumns {
  ID
  NAME
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Phenotype {
  hpoId: String!
  id: Int!
  link: String!
  name: String!
  url: String!
}

type PhenotypePopover {
  assertionCount: Int!
  evidenceItemCount: Int!
  hpoId: String!
  id: Int!
  link: String!
  name: String!
  url: String!
}

input PhenotypeSort {
  """
  Available columns for sorting
  """
  column: PhenotypeSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum PhenotypeSortColumns {
  ASSERTION_COUNT
  EVIDENCE_ITEM_COUNT
  HPO_ID
  NAME
}

type Query {
  """
  Retrieve ACMG Code options as a typeahead
  """
  acmgCodesTypeahead(queryTerm: String!): [AcmgCode!]!

  """
  Find an assertion by CIViC ID
  """
  assertion(id: Int!): Assertion

  """
  List and filter assertions.
  """
  assertions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filtering on the AMP/ASCO/CAP category.
    """
    ampLevel: AmpLevel

    """
    Filtering on the assertion direction.
    """
    assertionDirection: EvidenceDirection

    """
    Filtering on the assertion type.
    """
    assertionType: EvidenceType

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering on the assertion's clinical significance.
    """
    clinicalSignificance: EvidenceClinicalSignificance

    """
    Exact match filtering of the assertions based on the internal CIViC disease id
    """
    diseaseId: Int

    """
    Substring filtering on disease name.
    """
    diseaseName: String

    """
    Exact match filtering of the assertions based on the internal CIViC drug id
    """
    drugId: Int

    """
    Substring filtering on drug name.
    """
    drugName: String

    """
    Exact match filtering on the ID of evidence underlying the assertion.
    """
    evidenceId: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Exact match filtering on the ID of the assertion.
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Exact match filtering on the ID of the molecular_profile.
    """
    molecularProfileId: Int

    """
    Substring filtering on molecular profile name
    """
    molecularProfileName: String

    """
    Exact match filtering on the ID of the organization the assertion was submitted under.
    """
    organizationId: Int

    """
    Exact match filtering of the assertions based on the internal CIViC phenotype id
    """
    phenotypeId: Int

    """
    Columm and direction to sort evidence on.
    """
    sortBy: AssertionSort

    """
    Filtering on the status of the assertion.
    """
    status: EvidenceStatusFilter

    """
    Substring filtering on assertion description.
    """
    summary: String

    """
    Exact match filtering on the ID of the user who submitted the assertion.
    """
    userId: Int

    """
    Exact match filtering on the ID of the variant.
    """
    variantId: Int

    """
    Substring filtering on variant name.
    """
    variantName: String
  ): AssertionConnection!
  browseDiseases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    doid: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneNames: String
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
    sortBy: DiseasesSort
  ): BrowseDiseaseConnection!
  browseGenes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneAlias: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    searchScope: GeneSearchFilter
    sortBy: GenesSort
  ): BrowseGeneConnection!
  browseMolecularProfiles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    molecularProfileAlias: String
    sortBy: MolecularProfilesSort
    variantId: Int
    variantName: String
  ): BrowseMolecularProfileConnection!
  browseSources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    citationId: Int
    clinicalTrialId: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    id: Int
    journal: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
    sortBy: SourcesSort
    sourceType: SourceSource
    year: Int
  ): BrowseSourceConnection!
  browseVariantGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneNames: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
    sortBy: VariantGroupsSort
    variantNames: String
  ): BrowseVariantGroupConnection!
  browseVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: VariantsSort
    variantAlias: String
    variantGroupId: Int
    variantName: String
    variantTypeId: Int
  ): BrowseVariantConnection!

  """
  Retrieve Clingen Code options as a typeahead
  """
  clingenCodesTypeahead(queryTerm: String!): [ClingenCode!]!

  """
  Find a clinical trial by CIViC ID
  """
  clinicalTrial(id: Int!): ClinicalTrial

  """
  List and filter Clinical Trials from ClinicalTrials.gov.
  """
  clinicalTrials(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter to a Clinical Trial based on its internal CIViC id
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on clinical trial title
    """
    name: String

    """
    Limit to clinical trials with a specific NCT ID
    """
    nctId: String

    """
    Sort order for the clinical trials. Defaults to the highest source count.
    """
    sortBy: ClinicalTrialSort
  ): BrowseClinicalTrialConnection!

  """
  Find a comment by CIViC ID
  """
  comment(id: Int!): Comment

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to comments on a certain subject.
    """
    subject: CommentableInput
  ): CommentConnection!
  contributors(
    """
    The entity to to return contributors for
    """
    subscribable: SubscribableInput!
  ): ContributingUsersSummary!

  """
  Fetch a list of countries for user profiles.
  """
  countries: [Country!]!
  dataReleases: [DataRelease!]!

  """
  Find a disease by CIViC ID
  """
  disease(id: Int!): Disease

  """
  Retrieve popover fields for a specific disease.
  """
  diseasePopover(id: Int!): DiseasePopover

  """
  Retrieve disease typeahead fields for a search term.
  """
  diseaseTypeahead(queryTerm: String!): [Disease!]!

  """
  Find a drug by CIViC ID
  """
  drug(id: Int!): Drug

  """
  Retrieve popover fields for a specific drug.
  """
  drugPopover(id: Int!): DrugPopover

  """
  Retrieve drug typeahead fields for a search term.
  """
  drugTypeahead(queryTerm: String!): [Drug!]!

  """
  List and filter Drugs from the NCI Thesaurus.
  """
  drugs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter on a Drug's internal CIViC id
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on drug name
    """
    name: String

    """
    Limit to drugs with a specific NCIT ID
    """
    ncitId: String

    """
    Sort order for the drugs. Defaults to the highest evidence item count.
    """
    sortBy: DrugSort
  ): BrowseDrugConnection!

  """
  Retrieve entity type typeahead fields for a entity mention search term.
  """
  entityTypeahead(queryTerm: String!): [CommentTagSegment!]!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeAutomatedEvents: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    mode: EventFeedMode
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
    subject: SubscribableQueryInput
  ): EventConnection!

  """
  Find an evidence item by CIViC ID
  """
  evidenceItem(id: Int!): EvidenceItem

  """
  List and filter evidence items.
  """
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Exact match filtering on the ID of the assertion.
    """
    assertionId: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering on the evidence clinical significance.
    """
    clinicalSignificance: EvidenceClinicalSignificance

    """
    Exact match filtering of the evidence items based on the CIViC clinical trial id linked to the evidence item's source
    """
    clinicalTrialId: Int

    """
    Substring filtering on evidence item description.
    """
    description: String

    """
    Exact match filtering of the evidence items based on the internal CIViC disease id
    """
    diseaseId: Int

    """
    Substring filtering on disease name.
    """
    diseaseName: String

    """
    Exact match filtering of the evidence items based on the internal CIViC drug id
    """
    drugId: Int

    """
    Substring filtering on drug name.
    """
    drugName: String

    """
    Filtering on the evidence direction.
    """
    evidenceDirection: EvidenceDirection

    """
    Filtering on the evidence level.
    """
    evidenceLevel: EvidenceLevel

    """
    Filtering on the evidence rating. Valid values: 1, 2, 3, 4, 5
    """
    evidenceRating: Int

    """
    Filtering on the evidence type.
    """
    evidenceType: EvidenceType

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Exact match filtering on the ID of the evidence item.
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Exact match filtering on the ID of the molecular profile.
    """
    molecularProfileId: Int

    """
    Substring filtering on molecular profile name
    """
    molecularProfileName: String

    """
    Exact match filtering on the ID of the organization the evidence item was submitted under.
    """
    organizationId: Int

    """
    Exact match filtering of the evidence items based on the internal CIViC phenotype id
    """
    phenotypeId: Int

    """
    Columm and direction to sort evidence on.
    """
    sortBy: EvidenceSort

    """
    Exact match filtering of the evidence items based on the interal CIViC source id
    """
    sourceId: Int

    """
    Filtering on the evidence status.
    """
    status: EvidenceStatusFilter

    """
    Exact match filtering on the ID of the user who submitted the evidence item.
    """
    userId: Int

    """
    Exact match filtering on the ID of the variant.
    """
    variantId: Int

    """
    Filtering on the evidence variant origin.
    """
    variantOrigin: VariantOrigin
  ): EvidenceItemConnection!

  """
  Find a flag by CIViC ID
  """
  flag(id: Int!): Flag

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    flaggable: FlaggableInput

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!

  """
  Find a gene by CIViC ID
  """
  gene(id: Int!): Gene

  """
  Retrieve gene typeahead fields for a search term.
  """
  geneTypeahead(queryTerm: String!): [Gene!]!

  """
  List and filter genes.
  """
  genes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GeneConnection!

  """
  Find a molecular profile by CIViC ID
  """
  molecularProfile(id: Int!): MolecularProfile

  """
  List and filter molecular profiles.
  """
  molecularProfiles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit molecular profiles by the status of attached evidence.
    """
    evidenceStatusFilter: MolecularProfileDisplayFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter molecular profiles to the CIViC id of the gene(s) involved.
    """
    geneId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Left anchored filtering for molecular profile name and aliases.
    """
    name: String
  ): MolecularProfileConnection!

  """
  Retrieve NCCN Guideline options as a typeahead
  """
  nccnGuidelinesTypeahead(queryTerm: String!): [NccnGuideline!]!

  """
  List and filter notifications for the logged in user.
  """
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeRead: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    notificationReason: NotificationReason
    organizationId: Int
    originatingObject: SubscribableInput
    originatingUserId: Int
    subscriptionId: Int
  ): NotificationConnection!

  """
  Find an organization by CIViC ID
  """
  organization(id: Int!): Organization

  """
  List and filter organizations.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Exact match filtering on the id of the organization.
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Substring filtering on the name of the organization.
    """
    name: String

    """
    Columm and direction to sort evidence on.
    """
    sortBy: OrganizationSort
  ): OrganizationConnection!

  """
  Find a phenotype by CIViC ID
  """
  phenotype(id: Int!): Phenotype

  """
  Retrieve popover fields for a specific phenotype.
  """
  phenotypePopover(id: Int!): PhenotypePopover

  """
  Retrieve phenotype typeahead fields for a search term.
  """
  phenotypeTypeahead(queryTerm: String!): [Phenotype!]!

  """
  List and filter Phenotypes from the Human Phenotype Ontology.
  """
  phenotypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to phenotypes with a specific HPO ID
    """
    hpoId: String

    """
    Filter Phenotype on internal CIViC id
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on phenotype name (class)
    """
    name: String

    """
    Sort order for the phenotypes. Defaults to the highest evidence item count.
    """
    sortBy: PhenotypeSort
  ): BrowsePhenotypeConnection!
  previewCommentText(commentText: String!): [CommentBodySegment!]!
  previewMolecularProfileName(structure: MolecularProfileComponentInput): MolecularProfileNamePreview!

  """
  Check to see if a citation ID for a source not already in CIViC exists in an external database.
  """
  remoteCitation(citationId: String!, sourceType: SourceSource!): String

  """
  Find a revision by CIViC ID
  """
  revision(id: Int!): Revision

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions accepted, rejected, or superseded by a certain user
    """
    resolvingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus

    """
    Limit to revisions of a specific CIViC entity
    """
    subject: ModeratedInput
  ): RevisionConnection!
  search(
    """
    Should matches come back highlighted
    """
    highlightMatches: Boolean

    """
    The term to query for
    """
    query: String!

    """
    The types of objects to search. Omitting this value searches all.
    """
    types: [SearchableEntities!]
  ): [SearchResult!]!
  searchByPermalink(permalinkId: String!): AdvancedSearchResult!
  searchGenes(createPermalink: Boolean = false, query: GeneSearchFilter!): AdvancedSearchResult!

  """
  Find a source by CIViC ID
  """
  source(id: Int!): Source

  """
  Retrieve popover fields for a specific source.
  """
  sourcePopover(id: Int!): SourcePopover

  """
  Given the parameters in a source suggestion, fetch the values to populate the add evidence form
  """
  sourceSuggestionValues(diseaseId: Int, molecularProfileId: Int, sourceId: Int): SourceSuggestionValues!
  sourceSuggestions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    citation: String
    citationId: Int
    comment: String
    diseaseName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    molecularProfileName: String
    sortBy: SourceSuggestionsSort
    sourceId: Int
    sourceType: SourceSource
    status: SourceSuggestionStatus
    submitter: String
    submitterId: Int
  ): SourceSuggestionConnection!

  """
  Provide suggestions for sources based on a partial citation ID
  """
  sourceTypeahead(citationId: String!, sourceType: SourceSource!): [Source!]!

  """
  Get the active subscription for the entity and logged in user, if any
  """
  subscriptionForEntity(subscribable: SubscribableInput!): Subscription
  timepointStats: CivicTimepointStats!
  user(id: Int!): User

  """
  Retrieve user type typeahead fields for a search term.
  """
  userTypeahead(queryTerm: String!): [User!]!

  """
  List and filter users.
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering on name
    """
    name: String

    """
    Limit to users that belong to a certain organizations
    """
    organization: OrganizationFilter

    """
    Filtering on role.
    """
    role: UserRole

    """
    Sort user columns in ascending or decending order
    """
    sortBy: UsersSort

    """
    Filtering on username
    """
    username: String
  ): UserConnection!
  validateRevisionsForAcceptance(
    """
    A list of CIViC Revisions IDs to validate
    """
    revisionIds: [Int!]!
  ): ValidationErrors!

  """
  Find a variant by CIViC ID
  """
  variant(id: Int!): Variant

  """
  Find a variant group by CIViC ID
  """
  variantGroup(id: Int!): VariantGroup

  """
  List and filter variant groups.
  """
  variantGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Gene that variant groups are associated with.
    """
    geneId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): VariantGroupConnection!

  """
  Find a variant type by CIViC ID
  """
  variantType(id: Int!): VariantType

  """
  Retrieve popover fields for a specific variant type.
  """
  variantTypePopover(id: Int!): VariantTypePopover

  """
  Retrieve variant type typeahead fields for a search term.
  """
  variantTypeTypeahead(queryTerm: String!): [VariantType!]!

  """
  List and filter Variant Types from the Sequence Ontology.
  """
  variantTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter variant types by internal CIViC id
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on variant type name
    """
    name: String

    """
    Limit to variant types  with a specific Sequence Ontology ID
    """
    soid: String

    """
    Sort order for the variant type. Defaults to most recent.
    """
    sortBy: VariantTypeSort
  ): BrowseVariantTypeConnection!

  """
  List and filter variants.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Gene that variants are associated with.
    """
    geneId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Left anchored filtering for variant name and aliases.
    """
    name: String
    sortBy: VariantMenuSort
  ): VariantConnection!
  viewer: User
}

enum ReadStatus {
  READ
  UNREAD
}

enum ReferenceBuild {
  GRCH37
  GRCH38
  NCBI36
}

"""
Autogenerated input type of RejectRevisions
"""
input RejectRevisionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text explaining the reasoning for rejecting this Revision. Will be attached as a comment.
  """
  comment: String!

  """
  A list of IDs of the Revisions to reject.
  """
  ids: [Int!]

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The ID of a revision set.
  """
  revisionSetId: ID
}

"""
Autogenerated return type of RejectRevisions
"""
type RejectRevisionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The rejected Revisions.
  """
  revisions: [Revision!]!
}

"""
Autogenerated input type of ResolveFlag
"""
input ResolveFlagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for resolving the flag. Will be attached as a comment.
  """
  comment: String!

  """
  The ID of the flag to resolve.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of ResolveFlag
"""
type ResolveFlagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  flag: Flag
}

type Revision implements Commentable & EventOriginObject & EventSubject {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  createdAt: ISO8601DateTime!
  creationComment: Comment
  creationEvent: Event
  currentValue: JSON

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  fieldName: String!
  id: Int!
  lastCommentEvent: Event
  link: String!
  linkoutData: LinkoutData!
  name: String!
  resolutionComment: Comment
  resolvedAt: ISO8601DateTime
  resolver: User
  resolvingEvent: Event
  revisionsetId: String!
  revisor: User
  status: RevisionStatus!
  subject: EventSubject!
  suggestedValue: JSON
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Revision.
"""
type RevisionConnection {
  """
  A list of edges.
  """
  edges: [RevisionEdge!]!

  """
  A list of nodes.
  """
  nodes: [Revision!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  List of all fields that have at least one revision.
  """
  revisedFieldNames: [FieldName!]!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  When filtered on a subject, the total number of revisions for that subject,
  irregardless of other filters. Null when no subject provided.
  """
  unfilteredCountForSubject: Int

  """
  List of all users that have accepted/rejected/superseded a revision to this entity.
  """
  uniqueResolvers: [User!]!

  """
  List of all users that have submitted a revision to this entity.
  """
  uniqueRevisors: [User!]!
}

"""
An edge in a connection.
"""
type RevisionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Revision
}

type RevisionResult {
  """
  Name of the field on the moderated entity that the Revision pertains to.
  """
  fieldName: String!

  """
  ID of the Revision.
  """
  id: Int!

  """
  Was this Revision newly created as a result of this request?
  """
  newlyCreated: Boolean!

  """
  An identifier that can be used to group Revisions proposed at the same time.
  """
  revisionsetId: String!
}

enum RevisionStatus {
  ACCEPTED
  NEW
  REJECTED
  SUPERSEDED
}

type ScalarField {
  value: String
}

type ScalarFieldDiff {
  left: String!
  right: String!
}

type SearchResult {
  id: Int!
  matchingText: String!
  name: String!
  resultType: SearchableEntities!
}

enum SearchableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  MOLECULAR_PROFILE
  REVISION
  VARIANT
  VARIANT_GROUP
}

enum SortDirection {
  ASC
  DESC
}

type Source implements Commentable & EventSubject {
  abstract: String
  ascoAbstractId: Int
  authorString: String
  citation: String
  citationId: String!
  clinicalTrials: [ClinicalTrial!]

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  displayType: String!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  fullJournalTitle: String
  id: Int!
  journal: String
  lastCommentEvent: Event
  link: String!
  name: String!
  pmcId: String
  publicationDate: String
  publicationDay: Int
  publicationMonth: Int
  publicationYear: Int
  sourceType: SourceSource!
  sourceUrl: String
  title: String
}

type SourcePopover implements Commentable & EventSubject {
  abstract: String
  ascoAbstractId: Int
  authorString: String
  citation: String
  citationId: String!
  clinicalTrials: [ClinicalTrial!]

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  displayType: String!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceItemCount: Int!
  fullJournalTitle: String
  id: Int!
  journal: String
  lastCommentEvent: Event
  link: String!
  name: String!
  pmcId: String
  publicationDate: String
  publicationDay: Int
  publicationMonth: Int
  publicationYear: Int
  sourceType: SourceSource!
  sourceUrl: String
  title: String
}

enum SourceSource {
  ASCO
  ASH
  PUBMED
}

type SourceStub {
  citationId: Int!
  id: Int!
  sourceType: SourceSource!
}

type SourceSuggestion implements EventOriginObject & EventSubject {
  createdAt: ISO8601DateTime!
  disease: Disease

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  id: Int!
  initialComment: String!
  link: String!
  molecularProfile: MolecularProfile
  name: String!
  reason: String
  source: Source
  status: SourceSuggestionStatus!
  user: User
}

"""
The connection type for SourceSuggestion.
"""
type SourceSuggestionConnection {
  """
  A list of edges.
  """
  edges: [SourceSuggestionEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [SourceSuggestion!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SourceSuggestionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SourceSuggestion
}

enum SourceSuggestionStatus {
  CURATED
  NEW
  REJECTED
}

type SourceSuggestionValues {
  disease: Disease
  molecularProfile: MolecularProfile
  source: Source
}

input SourceSuggestionsSort {
  """
  Available columns for sorting
  """
  column: SourceSuggestionsSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum SourceSuggestionsSortColumns {
  CITATION
  CITATION_ID
  CREATED_AT
  DISEASE_NAME
  SOURCE_TYPE
  SUBMITTER
}

input SourcesSort {
  """
  Available columns for sorting
  """
  column: SourcesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum SourcesSortColumns {
  AUTHORS
  CITATION_ID
  EVIDENCE_COUNT
  JOURNAL
  NAME
  SOURCE_TYPE
  SUGGESTION_COUNT
  YEAR
}

type Stats {
  acceptedAssertions: Int!
  acceptedEvidenceItems: Int!
  appliedRevisions: Int!
  comments: Int!
  revisions: Int!
  submittedAssertions: Int!
  submittedEvidenceItems: Int!
  suggestedSources: Int!
}

input StringSearchInput {
  comparisonOperator: StringSearchOperator!
  value: String!
}

enum StringSearchOperator {
  CONTAINS
  DOES_NOT_CONTAIN
  EQ
  NE
  STARTS_WITH
}

"""
Autogenerated input type of SubmitAssertion
"""
input SubmitAssertionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing any further context or details about your proposed Assertion. Will be attached as a comment.
  """
  comment: String

  """
  The desired state of the Assertion's editable fields.
  """
  fields: AssertionFields!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SubmitAssertion
"""
type SubmitAssertionPayload {
  """
  The newly created Assertion
  """
  assertion: Assertion!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of SubmitEvidenceItem
"""
input SubmitEvidenceItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing any further context or details about your proposed EvidenceItem. Will be attached as a comment.
  """
  comment: String

  """
  The desired state of the EvidenceItems's editable fields.
  """
  fields: EvidenceItemFields!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SubmitEvidenceItem
"""
type SubmitEvidenceItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created EvidenceItem
  """
  evidenceItem: EvidenceItem!
}

"""
Autogenerated input type of SubmitVariantGroup
"""
input SubmitVariantGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A description of the variant group.
  """
  description: String!

  """
  The name of the disease.
  """
  name: String!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  A list of CIViC source IDs to associate with the variant group.
  """
  sourceIds: [Int!]!

  """
  A list of CIViC variant IDs to add to the variant group.
  """
  variantIds: [Int!]!
}

"""
Autogenerated return type of SubmitVariantGroup
"""
type SubmitVariantGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Variant Group
  """
  variantGroup: VariantGroup!
}

type Subscribable {
  entityType: SubscribableEntities!
  id: Int!
}

"""
Enumeration of all subscribable CIViC entities.
"""
enum SubscribableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  MOLECULAR_PROFILE
  REVISION
  SOURCE_SUGGESTION
  VARIANT
  VARIANT_GROUP
}

"""
Entity to subscribe to.
"""
input SubscribableInput {
  """
  Type of subscribable entity.
  """
  entityType: SubscribableEntities!

  """
  ID of subscribable entity.
  """
  id: Int!
}

"""
Entity to subscribe to.
"""
input SubscribableQueryInput {
  """
  Type of subscribable entity.
  """
  entityType: SubscribableEntities!

  """
  ID of subscribable entity.
  """
  id: Int!

  """
  Include child entities of the requested subscribable
  """
  includeChildren: Boolean = false
}

"""
Autogenerated input type of Subscribe
"""
input SubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more entities to subscribe to, each identified by its ID and type.
  """
  subscribables: [SubscribableInput!]!

  """
  Do you want to subscribe to related child entities of the subscribed entities?
  IE: If you subscribe to a Gene, do you want to receive notifications for its Variants as well?
  """
  subscribeToChildren: Boolean = false
}

"""
Autogenerated return type of Subscribe
"""
type SubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created subscription objects.
  """
  subscriptions: [Subscription!]!
}

type Subscription {
  id: Int!
  subscribable: EventSubject!
}

"""
Autogenerated input type of SuggestAssertionRevision
"""
input SuggestAssertionRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the Assertion's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: AssertionFields!

  """
  The ID of the Assertion to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestAssertionRevision
"""
type SuggestAssertionRevisionPayload {
  """
  The Assertion the user has proposed a Revision to.
  """
  assertion: Assertion!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of SuggestEvidenceItemRevision
"""
input SuggestEvidenceItemRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the EvidenceItems's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: EvidenceItemFields!

  """
  The ID of the EvidenceItem to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestEvidenceItemRevision
"""
type SuggestEvidenceItemRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The EvidenceItem the user has proposed a Revision to.
  """
  evidenceItem: EvidenceItem!

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of SuggestGeneRevision
"""
input SuggestGeneRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the Gene's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: GeneFields!

  """
  The ID of the Gene to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestGeneRevision
"""
type SuggestGeneRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Gene the user has proposed a Revision to.
  """
  gene: Gene!

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of SuggestMolecularProfileRevision
"""
input SuggestMolecularProfileRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the Molecular Profile's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: MolecularProfileFields!

  """
  The ID of the MolecularProfile to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestMolecularProfileRevision
"""
type SuggestMolecularProfileRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The MolecularProfile the user has proposed a Revision to.
  """
  molecularProfile: MolecularProfile!

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of SuggestSource
"""
input SuggestSourceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text explaining why this source should be curated for CIViC evidence.
  """
  comment: String!

  """
  Internal CIViC ID for the applicable disease, if any.
  """
  diseaseId: Int

  """
  Internal CIViC ID for the applicable molecular profile, if any.
  """
  molecularProfileId: Int

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  Internal CIViC ID for the source to suggest. Use the AddRemoteCitation mutation to populate this if needed.
  """
  sourceId: Int!
}

"""
Autogenerated return type of SuggestSource
"""
type SuggestSourcePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Source Suggestion
  """
  sourceSuggestion: SourceSuggestion!
}

"""
Autogenerated input type of SuggestVariantGroupRevision
"""
input SuggestVariantGroupRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the VariantGroup's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: VariantGroupFields!

  """
  The ID of the VariantGroup you are suggesting a Revision to
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestVariantGroupRevision
"""
type SuggestVariantGroupRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!

  """
  The VariantGroup the user has proposed a Revision to.
  """
  variantGroup: VariantGroup!
}

"""
Autogenerated input type of SuggestVariantRevision
"""
input SuggestVariantRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String

  """
  The desired state of the Variant's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: VariantFields!

  """
  The ID of the Variant to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestVariantRevision
"""
type SuggestVariantRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!

  """
  The Variant the user has proposed a Revision to.
  """
  variant: Variant!
}

enum TaggableEntity {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  MOLECULAR_PROFILE
  REVISION
  ROLE
  VARIANT
  VARIANT_GROUP
}

"""
Mentioned entity to filter comments on.
"""
input TaggableEntityInput {
  """
  The type of the entity
  """
  entityType: TaggableEntity!

  """
  ID of the mentioned entity
  """
  id: Int!
}

type TimePointCounts {
  allTime: Int!
  newThisMonth: Int!
  newThisWeek: Int!
  newThisYear: Int!
}

"""
Autogenerated input type of Unsubscribe
"""
input UnsubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more entities to unsubscribe from, each identified by its ID and type.
  """
  subscribables: [SubscribableInput!]!

  """
  Do you also wish to stop receiving notifications from child entities?
  IE: If you unsubscribe from a Gene do you want to stop receiving notifications for its Variants as well?
  """
  unsubscribeFromChildren: Boolean = false
}

"""
Autogenerated return type of Unsubscribe
"""
type UnsubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The entities that were unsubscribed from.
  """
  unsubscribedEntities: [Subscribable!]!
}

"""
Autogenerated input type of UpdateCoi
"""
input UpdateCoiInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Does the user report having a conflict of interest? Mark true if so.
  """
  coiPresent: Boolean!

  """
  If the user reports a potential conflict of interest please provide a brief summary of it.
  """
  statement: String
}

"""
Autogenerated return type of UpdateCoi
"""
type UpdateCoiPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  coiStatement: Coi!
}

"""
Autogenerated input type of UpdateNotificationStatus
"""
input UpdateNotificationStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more Notification IDs.
  """
  ids: [Int!]!

  """
  The new status of the selected notifications.
  """
  newStatus: ReadStatus!
}

"""
Autogenerated return type of UpdateNotificationStatus
"""
type UpdateNotificationStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of the notifications in their new state.
  """
  notifications: [Notification!]!
}

"""
Autogenerated input type of UpdateSourceSuggestionStatus
"""
input UpdateSourceSuggestionStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the SourceSuggestion to update.
  """
  id: Int!

  """
  The desired status of the SourceSuggestion.
  """
  newStatus: SourceSuggestionStatus!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The justification for marking a source as curated/rejected
  """
  reason: String
}

"""
Autogenerated return type of UpdateSourceSuggestionStatus
"""
type UpdateSourceSuggestionStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The updated SourceSuggestion.
  """
  sourceSuggestion: SourceSuggestion!
}

type User {
  areaOfExpertise: AreaOfExpertise
  bio: String
  country: Country
  displayName: String!
  email: String
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  facebookProfile: String
  id: Int!
  linkedinProfile: String
  mostRecentActionTimestamp: ISO8601DateTime
  mostRecentConflictOfInterestStatement: Coi
  mostRecentEvent: Event
  mostRecentOrganizationId: Int
  name: String

  """
  Filterable list of notifications for the logged in user.
  """
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter the response to include only notifications generated by certain actions (ex: commenting).
    """
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    includeSeen: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the response to include only notifications of a certaint type (ex: mentions).
    """
    notificationType: NotificationReason

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    subscriptionId: Int
  ): NotificationConnection
  orcid: String
  organizations: [Organization!]!
  profileImagePath(size: Int = 56): String
  role: UserRole!
  statsHash: Stats!
  twitterHandle: String
  url: String
  username: String!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge!]!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

enum UserRole {
  ADMIN
  CURATOR
  EDITOR
}

input UsersSort {
  """
  Available columns for sorting
  """
  column: UsersSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum UsersSortColumns {
  ID
  LAST_ACTION
  NAME
  ROLE
}

type ValidationErrors {
  genericErrors: [String!]!
  validationErrors: [FieldValidationError!]!
}

type Variant implements Commentable & EventOriginObject & EventSubject & Flaggable & MolecularProfileComponent & WithRevisions {
  alleleRegistryId: String
  clinvarIds: [String!]!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  deprecated: Boolean!
  deprecationComment: Comment
  deprecationEvent: Event
  deprecationReason: DeprecationReason
  description: String
  ensemblVersion: Int

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EvidenceItemConnection!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  gene: Gene!
  hgvsDescriptions: [String!]!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  link: String!
  molecularProfiles: [MolecularProfile!]!
  myVariantInfo: MyVariantInfo
  name: String!
  primaryCoordinates: Coordinate
  referenceBases: String
  referenceBuild: ReferenceBuild

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  secondaryCoordinates: Coordinate
  singleVariantMolecularProfile: MolecularProfile!
  singleVariantMolecularProfileId: Int!
  sources: [Source!]!
  variantAliases: [String!]!
  variantBases: String
  variantTypes: [VariantType!]!
}

type VariantAlias {
  name: String!
}

"""
Representation of a Variant's membership in a Molecular Profile.
"""
input VariantComponent {
  """
  When set to true, this means the NOT operator will be applied to the Variant in the Molecluar Profile.
  """
  not: Boolean! = false

  """
  The ID of the Variant involved in the Molecular Profile.
  """
  variantId: Int!
}

"""
The connection type for Variant.
"""
type VariantConnection {
  """
  A list of edges.
  """
  edges: [VariantEdge!]!

  """
  A list of nodes.
  """
  nodes: [Variant!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Variant
}

"""
Fields on a Variant that curators may propose revisions to.
"""
input VariantFields {
  """
  List of aliases or alternate names for the Variant.
  """
  aliases: [String!]!

  """
  List of ClinVar IDs for the Variant.
  """
  clinvarIds: ClinvarInput!

  """
  The Variant's description/summary text.
  """
  description: NullableStringInput!

  """
  The Ensembl database version.
  """
  ensemblVersion: NullableIntInput!

  """
  The ID of the Gene this Variant corresponds to.
  """
  geneId: Int!

  """
  List of HGVS descriptions for the Variant.
  """
  hgvsDescriptions: [String!]!

  """
  The Variant's name.
  """
  name: String!

  """
  The primary coordinates for this Variant. In the case of Fusions this will be the coordinates of the 5' partner.
  """
  primaryCoordinates: CoordinateInput!

  """
  Reference bases for this variant
  """
  referenceBases: NullableStringInput!

  """
  The reference build for the genomic coordinates of this Variant.
  """
  referenceBuild: NullableReferenceBuildTypeInput!

  """
  In the case of Fusions these will be the coordinates of the 3' partner, otherwise set the values to null.
  """
  secondaryCoordinates: CoordinateInput!

  """
  Source IDs cited by the Variant's summary.
  """
  sourceIds: [Int!]!

  """
  Variant bases for this variant
  """
  variantBases: NullableStringInput!

  """
  List of IDs for the variant types for this Variant
  """
  variantTypeIds: [Int!]!
}

type VariantGroup implements Commentable & EventSubject & Flaggable & WithRevisions {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments that mention a certain entity
    """
    mentionedEntity: TaggableEntityInput

    """
    Limit to comments that mention a certain user role
    """
    mentionedRole: UserRole

    """
    Limit to comments that mention a certain user
    """
    mentionedUserId: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  link: String!
  name: String!

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  sources: [Source!]!

  """
  List and filter variants.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Left anchored filtering for variant name and aliases.
    """
    name: String
  ): VariantConnection!
}

"""
The connection type for VariantGroup.
"""
type VariantGroupConnection {
  """
  A list of edges.
  """
  edges: [VariantGroupEdge!]!

  """
  A list of nodes.
  """
  nodes: [VariantGroup!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type VariantGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: VariantGroup
}

"""
Fields on a VariantGroup that curators may propose revisions to.
"""
input VariantGroupFields {
  """
  The VariantGroups's description/summary text.
  """
  description: String!

  """
  The VariantGroups's name.
  """
  name: String!

  """
  Source IDs cited by the VariantGroup's summary.
  """
  sourceIds: [Int!]!

  """
  Variants in this VariantGroup.
  """
  variantIds: [Int!]!
}

input VariantGroupsSort {
  """
  Available columns for sorting
  """
  column: VariantGroupsSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantGroupsSortColumns {
  EVIDENCE_ITEM_COUNT
  GENE_NAMES
  NAME
  VARIANT_COUNT
  VARIANT_NAMES
}

input VariantMenuSort {
  """
  Available columns for sorting
  """
  column: VariantMenuSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantMenuSortColumns {
  COORDINATE_END
  COORDINATE_START
  NAME
}

enum VariantOrigin {
  COMMON_GERMLINE
  NA
  RARE_GERMLINE
  SOMATIC
  UNKNOWN
}

type VariantType {
  description: String!
  id: Int!
  link: String!
  name: String!
  soid: String!
  url: String
}

type VariantTypePopover {
  description: String!
  id: Int!
  link: String!
  name: String!
  soid: String!
  url: String
  variantCount: Int!
}

input VariantTypeSort {
  """
  Available columns for sorting
  """
  column: VariantTypeSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantTypeSortColumns {
  NAME
  SOID
  VARIANT_COUNT
}

input VariantsSort {
  """
  Available columns for sorting
  """
  column: VariantsSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantsSortColumns {
  diseaseName
  drugName
  entrezSymbol
  variantName
}

"""
A CIViC entity that can have revisions proposed to it.
"""
interface WithRevisions {
  lastAcceptedRevisionEvent: Event
  lastSubmittedRevisionEvent: Event

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
}
