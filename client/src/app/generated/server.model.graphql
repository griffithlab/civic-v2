"""
Autogenerated input type of AcceptRevision
"""
input AcceptRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Body of an optional comment to attach to the revision on acceptance.
  """
  comment: String

  """
  The ID of the Revision to accept.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of AcceptRevision
"""
type AcceptRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly accepted Revision.
  """
  revision: Revision!

  """
  A list of any revisions that were superseded by the acceptance of this one.
  """
  supersededRevisions: [Revision!]!
}

type AcmgCode {
  code: String!
  description: String!
  id: Int!
}

"""
Autogenerated input type of AddComment
"""
input AddCommentInput {
  """
  Text of the comment.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The commentable to attach the comment to. Specified by ID and Type.
  """
  subject: CommentableInput!

  """
  Optional title for the comment.
  """
  title: String
}

"""
Autogenerated return type of AddComment
"""
type AddCommentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created comment.
  """
  comment: Comment
}

"""
Autogenerated input type of AddRemoteCitation
"""
input AddRemoteCitationInput {
  """
  The external id for the source to add.
  """
  citationId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The origin of the external source.
  """
  sourceType: SourceSource!
}

"""
Autogenerated return type of AddRemoteCitation
"""
type AddRemoteCitationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The stubbed in record for the newly created source.
  """
  newSource: SourceStub!
}

type AdvancedSearchResult {
  permalinkId: String
  resultIds: [Int!]!
  searchEndpoint: String!
}

enum AmpLevel {
  NA
  TIER_III
  TIER_II_LEVEL_C
  TIER_II_LEVEL_D
  TIER_IV
  TIER_I_LEVEL_A
  TIER_I_LEVEL_B
}

type Assertion implements Commentable & EventOriginObject & EventSubject & Flaggable & WithRevisions {
  acceptanceEvent: Event
  acmgCodes: [AcmgCode!]!
  ampLevel: AmpLevel
  assertionDirection: EvidenceDirection!
  assertionType: EvidenceType!
  clinicalSignificance: EvidenceClinicalSignificance!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  disease: Disease
  drugInteractionType: DrugInteraction
  drugs: [Drug!]!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  fdaCompanionTest: Boolean
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  gene: Gene!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  name: String!
  nccnGuideline: String
  phenotypes: [Phenotype!]!
  regulatoryApproval: Boolean
  rejectionEvent: Event

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  source: Source!
  status: EvidenceStatus!
  submissionEvent: Event!
  summary: String!
  variant: Variant!
  variantOrigin: VariantOrigin!
}

"""
The connection type for Assertion.
"""
type AssertionConnection {
  """
  A list of edges.
  """
  edges: [AssertionEdge!]!

  """
  A list of nodes.
  """
  nodes: [Assertion!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AssertionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Assertion
}

input AssertionSort {
  """
  Available columns for sorting
  """
  column: AssertionSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum AssertionSortColumns {
  AMP_LEVEL
  ASSERTION_DIRECTION
  ASSERTION_TYPE
  CLINICAL_SIGNIFICANCE
  DISEASE_NAME
  DRUG_NAME
  GENE_NAME
  ID
  STATUS
  SUMMARY
  VARIANT_NAME
}

enum BooleanOperator {
  AND
  OR
}

input BooleanSearchInput {
  value: Boolean!
}

type BrowseDisease {
  assertionCount: Int!
  doid: String
  evidenceItemCount: Int!
  geneNames: [String!]!
  id: Int!
  name: String!
  variantCount: Int!
}

"""
The connection type for BrowseDisease.
"""
type BrowseDiseaseConnection {
  """
  A list of edges.
  """
  edges: [BrowseDiseaseEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseDisease!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseDiseaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseDisease
}

type BrowseDrug {
  assertionCount: Int!
  evidenceCount: Int!
  id: Int!
  name: String!
  ncitId: String
}

"""
The connection type for BrowseDrug.
"""
type BrowseDrugConnection {
  """
  A list of edges.
  """
  edges: [BrowseDrugEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseDrug!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseDrugEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseDrug
}

type BrowseGene {
  aliases: [GeneAlias!]
  assertionCount: Int!
  description: String!
  diseases: [Disease!]
  drugs: [Drug!]
  entrezId: Int!
  evidenceItemCount: Int!
  id: Int!
  name: String!
  variantCount: Int!
}

"""
The connection type for BrowseGene.
"""
type BrowseGeneConnection {
  """
  A list of edges.
  """
  edges: [BrowseGeneEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseGene!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseGeneEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseGene
}

type BrowsePhenotype {
  assertionCount: Int!
  evidenceCount: Int!
  hpoId: String!
  id: Int!
  name: String!
}

"""
The connection type for BrowsePhenotype.
"""
type BrowsePhenotypeConnection {
  """
  A list of edges.
  """
  edges: [BrowsePhenotypeEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowsePhenotype!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowsePhenotypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowsePhenotype
}

type BrowseSource {
  authors: [String!]!
  citation: String!
  citationId: Int!
  evidenceItemCount: Int!
  id: Int!
  journal: String
  name: String
  publicationYear: Int
  sourceType: SourceSource!
}

"""
The connection type for BrowseSource.
"""
type BrowseSourceConnection {
  """
  A list of edges.
  """
  edges: [BrowseSourceEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseSource!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseSourceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseSource
}

type BrowseVariant {
  assertionCount: Int!
  diseases: [Disease!]!
  drugs: [Drug!]!
  evidenceItemCount: Int!
  evidenceScore: Float!
  geneName: String!
  id: Int!
  name: String!
}

"""
The connection type for BrowseVariant.
"""
type BrowseVariantConnection {
  """
  A list of edges.
  """
  edges: [BrowseVariantEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseVariant!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseVariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseVariant
}

type BrowseVariantGroup {
  evidenceItemCount: Int!
  geneNames: [String!]!
  id: Int!
  name: String!
  variantCount: Int!
  variantNames: [String!]!
}

"""
The connection type for BrowseVariantGroup.
"""
type BrowseVariantGroupConnection {
  """
  A list of edges.
  """
  edges: [BrowseVariantGroupEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseVariantGroup!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseVariantGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseVariantGroup
}

type BrowseVariantType {
  id: Int!
  name: String!
  soid: String!
  variantCount: Int!
}

"""
The connection type for BrowseVariantType.
"""
type BrowseVariantTypeConnection {
  """
  A list of edges.
  """
  edges: [BrowseVariantTypeEdge!]!

  """
  The total number of records in this set.
  """
  filteredCount: Int!

  """
  A list of nodes.
  """
  nodes: [BrowseVariantType!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records of this type, regardless of any filtering.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrowseVariantTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BrowseVariantType
}

type ClinicalTrial {
  description: String!
  id: Int!
  name: String!
  nctId: String!
}

"""
An input object representing possible ClinVar ID states.
You may specify either one or more Integer IDs OR either none found or not applicable.
"""
input ClinvarInput {
  """
  The ClinVar ID(s)
  """
  ids: [Int!]
  noneFound: Boolean
  notApplicable: Boolean
}

type Coi {
  coiPresent: Boolean!
  coiStatement: String
  coiStatus: String!
  createdAt: ISO8601DateTime
  expiresAt: ISO8601DateTime!
}

type Comment implements EventOriginObject {
  comment: String!
  commenter: User!
  createdAt: ISO8601DateTime!
  creationEvent: Event
  id: Int!
  name: String!
  title: String
}

"""
The connection type for Comment.
"""
type CommentConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge!]!

  """
  A list of nodes.
  """
  nodes: [Comment!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  List of all users that have commented on this entity.
  """
  uniqueCommenters: [User!]!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

"""
A CIViC entity that can have comments on it.
"""
interface Commentable {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  lastCommentEvent: Event
}

enum CommentableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  VARIANT
}

"""
Entity to comment on
"""
input CommentableInput {
  """
  The type of the entity to comment on.
  """
  entityType: CommentableEntities!

  """
  ID of the entity to comment on.
  """
  id: Int!
}

"""
A user with all the unique kinds of actions they've performed on a given entity
"""
type ContributingUser {
  lastActionDate: ISO8601DateTime!
  uniqueActions: [EventAction!]!
  user: User!
}

type ContributingUsersSummary {
  curators: [ContributingUser!]!
  editors: [ContributingUser!]!
}

type Coordinate {
  chromosome: String
  referenceBases: String
  representativeTranscript: String
  start: Int
  stop: Int
  variantBases: String
}

input CoordinateInput {
  chromosome: String
  representativeTranscript: String
  start: Int
  stop: Int
}

input DateSort {
  """
  Value to sort by.
  """
  column: DateSortColumns!

  """
  Sort direction.
  """
  direction: SortDirection!
}

enum DateSortColumns {
  CREATED
  LAST_MODIFIED
}

type Disease {
  diseaseUrl: String
  displayName: String!
  doid: Int
  id: Int!
  name: String!
}

input DiseasesSort {
  """
  Available columns for sorting
  """
  column: DiseasesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum DiseasesSortColumns {
  ASSERTION_COUNT
  DOID
  EVIDENCE_ITEM_COUNT
  GENE_NAMES
  NAME
  VARIANT_COUNT
}

type Drug {
  drugUrl: String
  id: String!
  name: String!
  ncitId: String
}

enum DrugInteraction {
  COMBINATION
  SEQUENTIAL
  SUBSTITUTES
}

input DrugSort {
  """
  Available columns for sorting
  """
  column: DrugSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum DrugSortColumns {
  ASSERTION_COUNT
  EVIDENCE_ITEM_COUNT
  NAME
  NCIT_ID
}

type Event {
  action: EventAction!
  createdAt: ISO8601DateTime!
  id: Int!
  organization: Organization!
  originatingObject: EventOriginObject
  originatingUser: User!
  subject: EventSubject!
}

enum EventAction {
  ACCEPTED
  ASSERTION_ACCEPTED
  ASSERTION_REJECTED
  ASSERTION_SUBMITTED
  COMMENTED
  FLAGGED
  FLAG_RESOLVED
  PUBLICATION_SUGGESTED
  REJECTED
  REVERTED
  REVISION_ACCEPTED
  REVISION_REJECTED
  REVISION_SUGGESTED
  REVISION_SUPERSEDED
  SUBMITTED
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!

  """
  List of event types that have occured on this entity.
  """
  eventTypes: [EventAction!]!

  """
  A list of nodes.
  """
  nodes: [Event!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  List of all organizations who are involved in this event stream.
  """
  participatingOrganizations: [Organization!]!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  List of all users that have generated an event on the subject entity.
  """
  uniqueParticipants: [User!]!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

"""
The originating object for an event.
This is useful when the subject of an event is not the actual origin of the event.
For instance when you suggest a revision, the subject of the Event will be the entity being revised,
while the originating object will be the Revision itself.
"""
interface EventOriginObject {
  id: Int!
  name: String!
}

"""
The subject of an event log event.
"""
interface EventSubject {
  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  id: Int!
  name: String!
}

enum EvidenceClinicalSignificance {
  ADVERSE_RESPONSE
  BENIGN
  BETTER_OUTCOME
  DOMINANT_NEGATIVE
  GAIN_OF_FUNCTION
  LIKELY_BENIGN
  LIKELY_PATHOGENIC
  LOSS_OF_FUNCTION
  NA
  NEGATIVE
  NEOMORPHIC
  PATHOGENIC
  POOR_OUTCOME
  POSITIVE
  REDUCED_SENSITIVITY
  RESISTANCE
  SENSITIVITYRESPONSE
  UNALTERED_FUNCTION
  UNCERTAIN_SIGNIFICANCE
  UNKNOWN
}

enum EvidenceDirection {
  DOES_NOT_SUPPORT
  NA
  SUPPORTS
}

type EvidenceItem implements Commentable & EventOriginObject & EventSubject & Flaggable & WithRevisions {
  acceptanceEvent: Event
  assertions: [Assertion!]!
  clinicalSignificance: EvidenceClinicalSignificance!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  disease: Disease
  drugInteractionType: DrugInteraction
  drugs: [Drug!]!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceDirection: EvidenceDirection
  evidenceLevel: EvidenceLevel!
  evidenceRating: Int
  evidenceType: EvidenceType!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  gene: Gene!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  name: String!
  phenotypes: [Phenotype!]!
  rejectionEvent: Event

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  source: Source!
  status: EvidenceStatus!
  submissionEvent: Event!
  variant: Variant!
  variantHgvs: String!
  variantOrigin: VariantOrigin!
}

"""
The connection type for EvidenceItem.
"""
type EvidenceItemConnection {
  """
  A list of edges.
  """
  edges: [EvidenceItemEdge!]!

  """
  A list of nodes.
  """
  nodes: [EvidenceItem!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EvidenceItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EvidenceItem
}

"""
Fields on an EvidenceItem that curators may propose revisions to.
"""
input EvidenceItemFields {
  """
  The Clinical Significance of the EvidenceItem
  """
  clinicalSignificance: EvidenceClinicalSignificance!

  """
  The Evidence Items's description/summary text.
  """
  description: NullableStringInput!

  """
  The ID of the disease (if applicable) for this EvidenceItem
  """
  diseaseId: NullableIntInput!

  """
  List of IDs of CIViC Drug entries for this EvidenceItem. An empty list indicates none.
  """
  drugIds: [Int!]!

  """
  Drug interaction type for cases where more than one drug ID is provided.
  """
  drugInteractionType: NullableDrugInteractionTypeInput!

  """
  The evidence direction for this EvidenceItem.
  """
  evidenceDirection: EvidenceDirection!

  """
  The evidence level of the EvidenceItem
  """
  evidenceLevel: EvidenceLevel!

  """
  The Type of the EvidenceItem
  """
  evidenceType: EvidenceType!

  """
  List of IDs of CIViC Phenotype entries for this EvidenceItem. An empty list indicates none.
  """
  phenotypeIds: [Int!]!

  """
  The rating for this EvidenceItem
  """
  rating: Int!

  """
  The ID of the Source from which this EvidenceItem was curated.
  """
  sourceId: Int!

  """
  The ID of the Variant to which this EvidenceItem belongs
  """
  variantId: Int!

  """
  The Variant Origin for this EvidenceItem.
  """
  variantOrigin: VariantOrigin!
}

enum EvidenceLevel {
  A
  B
  C
  D
  E
}

input EvidenceSort {
  """
  Available columns for sorting
  """
  column: EvidenceSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum EvidenceSortColumns {
  CLINICAL_SIGNIFICANCE
  DESCRIPTION
  DISEASE_NAME
  DRUG_NAME
  EVIDENCE_DIRECTION
  EVIDENCE_LEVEL
  EVIDENCE_RATING
  EVIDENCE_TYPE
  ID
  STATUS
  VARIANT_ORIGIN
}

enum EvidenceStatus {
  ACCEPTED
  REJECTED
  SUBMITTED
}

enum EvidenceType {
  DIAGNOSTIC
  FUNCTIONAL
  ONCOGENIC
  PREDICTIVE
  PREDISPOSING
  PROGNOSTIC
}

type FieldName {
  """
  The user facing representation of the field name.
  """
  displayName: String!

  """
  The internal server representation of the field name.
  """
  name: String!
}

type Flag implements Commentable & EventOriginObject {
  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  createdAt: ISO8601DateTime!
  flaggable: Flaggable!
  flaggingUser: User!
  id: Int!
  lastCommentEvent: Event
  name: String!
  openComment: Comment!
  resolutionComment: Comment
  resolvedAt: ISO8601DateTime
  resolvingUser: User
  state: FlagState!
}

"""
The connection type for Flag.
"""
type FlagConnection {
  """
  A list of edges.
  """
  edges: [FlagEdge!]!

  """
  A list of nodes.
  """
  nodes: [Flag!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type FlagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Flag
}

"""
Autogenerated input type of FlagEntity
"""
input FlagEntityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the problem you observed with this entity.
  """
  comment: String!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int

  """
  The entity to flag, specified by its ID and type.
  """
  subject: FlaggableInput!
}

"""
Autogenerated return type of FlagEntity
"""
type FlagEntityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created Flag.
  """
  flag: Flag
}

enum FlagState {
  OPEN
  RESOLVED
}

"""
A CIViC entity that can be flagged for editor attention.
"""
interface Flaggable {
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  name: String!
}

"""
Enumeration of all entities in CIViC that can be flagged.
"""
enum FlaggableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  VARIANT
}

"""
Entity to flag
"""
input FlaggableInput {
  """
  The type of the entity to flag.
  """
  entityType: FlaggableEntities!

  """
  The ID of the entity.
  """
  id: Int!
}

type Gene implements Commentable & EventSubject & Flaggable & WithRevisions {
  aliases: [GeneAlias!]!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  entrezId: Int!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  myGeneInfoDetails: JSON
  name: String!
  officialName: String!

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  sources: [Source!]!

  """
  List and filter variants.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit variants by the status of attached evidence.
    """
    evidenceStatusFilter: VariantDisplayFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Left anchored filtering for variant name and aliases.
    """
    name: String
  ): VariantConnection!
}

type GeneAlias {
  name: String!
}

"""
Fields on a Gene that curators may propose revisions to.
"""
input GeneFields {
  """
  The Gene's description/summary text.
  """
  description: String!

  """
  Source IDs cited by the Gene's summary.
  """
  sourceIds: [Int!]!
}

input GeneSearchFilter {
  alias: StringSearchInput
  booleanOperator: BooleanOperator
  description: StringSearchInput
  entrezId: IntSearchInput
  entrezSymbol: StringSearchInput
  hasAssertion: BooleanSearchInput
  id: IntSearchInput
  openRevisionCount: IntSearchInput
  subFilters: [GeneSearchFilter!]
}

input GenesSort {
  """
  Available columns for sorting
  """
  column: GenesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum GenesSortColumns {
  assertionCount
  diseaseName
  drugName
  entrezSymbol
  evidenceItemCount
  geneAlias
  variantCount
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

input IntSearchInput {
  comparisonOperator: IntSearchOperator!
  value: Int!
}

enum IntSearchOperator {
  """
  Equal To
  """
  EQ
  GE
  GT
  LE
  LT
  NE
}

"""
Represents untyped JSON
"""
scalar JSON

type LinkoutData {
  currentValue: ModeratedField!
  diffValue: ModeratedFieldDiff!
  name: String!
  suggestedValue: ModeratedField!
}

"""
Autogenerated input type of MarkNotificationsAsRead
"""
input MarkNotificationsAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more Notification IDs.
  """
  ids: [Int!]!
}

"""
Autogenerated return type of MarkNotificationsAsRead
"""
type MarkNotificationsAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of the notifications in their new state.
  """
  notifications: [Notification!]!
}

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedField = ObjectField | ScalarField

"""
Fields that can have revisions can be either scalar values or complex objects
"""
union ModeratedFieldDiff = ObjectFieldDiff | ScalarField

type ModeratedObjectField {
  displayName: String!
  displayType: String!
  entityType: String!
  id: Int!
}

type Mutation {
  """
  Accept a revision by ID. The accepting user must be an editor with a valid
  conflict of interest statement on file and the revision must not be their own.
  """
  acceptRevision(
    """
    Parameters for AcceptRevision
    """
    input: AcceptRevisionInput!
  ): AcceptRevisionPayload

  """
  Add a comment to any commentable entity.
  """
  addComment(
    """
    Parameters for AddComment
    """
    input: AddCommentInput!
  ): AddCommentPayload

  """
  Add a stub record for an external source that is not yet in CiVIC.
  This is for adding a new Source inline while performing other curation activities
  such as adding new evidence items and is distinct from suggesting a source for curation.
  """
  addRemoteCitation(
    """
    Parameters for AddRemoteCitation
    """
    input: AddRemoteCitationInput!
  ): AddRemoteCitationPayload

  """
  Flag an entity to signal to the editorial team that you believe there is an issue with it.
  """
  flagEntity(
    """
    Parameters for FlagEntity
    """
    input: FlagEntityInput!
  ): FlagEntityPayload

  """
  Mark one or more of your notifications as read. The notification IDs provided must belong to the requesting user.
  """
  markNotificationsAsRead(
    """
    Parameters for MarkNotificationsAsRead
    """
    input: MarkNotificationsAsReadInput!
  ): MarkNotificationsAsReadPayload

  """
  Reject a revision by ID. Any user may reject a Revision that they submitted
  themselves. Otherwise, the rejecting user must be an editor with valid
  conflict of interest statement on file.
  """
  rejectRevision(
    """
    Parameters for RejectRevision
    """
    input: RejectRevisionInput!
  ): RejectRevisionPayload

  """
  Resolve a flag on a CIViC entity indicating that it was either erronously flagged or the issue has been resolved.
  Any user may resolve their own flag however only editors with valid conflict
  of interest statements can resolve other flags.
  """
  resolveFlag(
    """
    Parameters for ResolveFlag
    """
    input: ResolveFlagInput!
  ): ResolveFlagPayload

  """
  Subscribe to a CIViC entity in order to receive notifications about it.
  """
  subscribe(
    """
    Parameters for Subscribe
    """
    input: SubscribeInput!
  ): SubscribePayload

  """
  Suggest a Revision to an EvidenceItem entity.
  """
  suggestEvidenceItemRevision(
    """
    Parameters for SuggestEvidenceItemRevision
    """
    input: SuggestEvidenceItemRevisionInput!
  ): SuggestEvidenceItemRevisionPayload

  """
  Suggest a Revision to a Gene entity.
  """
  suggestGeneRevision(
    """
    Parameters for SuggestGeneRevision
    """
    input: SuggestGeneRevisionInput!
  ): SuggestGeneRevisionPayload

  """
  Suggest a Revision to a Variant entity.
  """
  suggestVariantRevision(
    """
    Parameters for SuggestVariantRevision
    """
    input: SuggestVariantRevisionInput!
  ): SuggestVariantRevisionPayload

  """
  Unsubscribe from a CIViC entity to stop receiving notifications about it.
  """
  unsubscribe(
    """
    Parameters for Unsubscribe
    """
    input: UnsubscribeInput!
  ): UnsubscribePayload
}

type Notification {
  createdAt: ISO8601DateTime!
  event: Event!
  id: Int!
  notifiedUser: User!
  originatingUser: User!
  seen: Boolean!
  subscription: Subscription
  type: NotificationReason!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge!]!

  """
  A list of nodes.
  """
  nodes: [Notification!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

enum NotificationReason {
  MENTION
  SUBSCRIPTION
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableDrugInteractionTypeInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: DrugInteraction
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableIntInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: Int
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableReferenceBuildTypeInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: ReferenceBuild
}

"""
An input object that represents a field value that can be "unset" or changed to null.
To change the field's value to null, pass unset as true, otherwise pass in the desired value as value.
This is to work around two issues with the GraphQL spec: lack of support for unions in input types
and the inability to have an input object argument be both required _and_ nullable at the same time.
"""
input NullableStringInput {
  """
  Set to true if you wish to set the field's value to null.
  """
  unset: Boolean

  """
  The desired value for the field. Mutually exclusive with unset.
  """
  value: String
}

type ObjectField {
  objects: [ModeratedObjectField!]!
}

type ObjectFieldDiff {
  addedObjects: [ModeratedObjectField!]!
  keptObjects: [ModeratedObjectField!]!
  removedObjects: [ModeratedObjectField!]!
}

type Organization {
  description: String!
  eventCount: Int!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  id: Int!
  memberCount: Int!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  mostRecentEvent: Event
  name: String!
  orgAndSuborgsStatsHash: Stats!
  orgStatsHash: Stats!
  profileImagePath(size: Int = 56): String
  subGroups: [Organization!]!
  url: String!
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge!]!

  """
  A list of nodes.
  """
  nodes: [Organization!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

"""
Filter on organization id and whether or not to include the organization's subgroups
"""
input OrganizationFilter {
  """
  The organization ID.
  """
  id: Int!

  """
  Whether or not to include the organization's subgroup.
  """
  includeSubgroups: Boolean = false
}

input OrganizationSort {
  """
  Available columns for sorting
  """
  column: OrganizationSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum OrganizationSortColumns {
  ID
  NAME
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Phenotype {
  hpoId: String!
  id: Int!
  name: String!
}

input PhenotypeSort {
  """
  Available columns for sorting
  """
  column: PhenotypeSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum PhenotypeSortColumns {
  ASSERTION_COUNT
  EVIDENCE_ITEM_COUNT
  HPO_ID
  NAME
}

type Query {
  """
  Find an assertion by CIViC ID
  """
  assertion(id: Int!): Assertion

  """
  List and filter assertions.
  """
  assertions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filtering on the AMP/ASCO/CAP category.
    """
    ampLevel: AmpLevel

    """
    Filtering on the assertion direction.
    """
    assertionDirection: EvidenceDirection

    """
    Filtering on the assertion type.
    """
    assertionType: EvidenceType

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering on the assertion's clinical significance.
    """
    clinicalSignificance: EvidenceClinicalSignificance

    """
    Exact match filtering of the assertions based on the internal CIViC disease id
    """
    diseaseId: Int

    """
    Substring filtering on disease name.
    """
    diseaseName: String

    """
    Exact match filtering of the assertions based on the internal CIViC drug id
    """
    drugId: Int

    """
    Substring filtering on drug name.
    """
    drugName: String

    """
    Exact match filtering on the ID of evidence underlying the assertion.
    """
    evidenceId: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Substring filtering on gene name.
    """
    geneName: String

    """
    Exact match filtering on the ID of the assertion.
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Exact match filtering on the ID of the organization the assertion was submitted under.
    """
    organizationId: Int

    """
    Exact match filtering of the assertions based on the internal CIViC phenotype id
    """
    phenotypeId: Int

    """
    Columm and direction to sort evidence on.
    """
    sortBy: AssertionSort

    """
    Substring filtering on assertion description.
    """
    summary: String

    """
    Exact match filtering on the ID of the user who submitted the assertion.
    """
    userId: Int

    """
    Exact match filtering on the ID of the variant.
    """
    variantId: Int

    """
    Substring filtering on variant name.
    """
    variantName: String
  ): AssertionConnection!
  browseDiseases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    doid: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneNames: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
    sortBy: DiseasesSort
  ): BrowseDiseaseConnection!
  browseGenes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneAlias: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: GenesSort
  ): BrowseGeneConnection!
  browseSources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    author: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    citationId: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    journal: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
    sortBy: SourcesSort
    sourceType: SourceSource
    year: Int
  ): BrowseSourceConnection!
  browseVariantGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    geneNames: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    name: String
    sortBy: VariantGroupsSort
    variantNames: String
  ): BrowseVariantGroupConnection!
  browseVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    diseaseName: String
    drugName: String
    entrezSymbol: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: VariantsSort
    variantName: String
    variantTypeId: Int
  ): BrowseVariantConnection!

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to comments on a certain subject.
    """
    subject: CommentableInput
  ): CommentConnection!
  contributors(
    """
    The entity to to return contributors for
    """
    subscribable: SubscribableInput!
  ): ContributingUsersSummary!

  """
  Find a disease by CIViC ID
  """
  disease(id: Int!): Disease

  """
  Find a drug by CIViC ID
  """
  drug(id: Int!): Drug

  """
  List and filter Drugs from the NCI Thesaurus.
  """
  drugs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on drug name
    """
    name: String

    """
    Limit to drugs with a specific NCIT ID
    """
    ncitId: String

    """
    Sort order for the drugs. Defaults to the highest evidence item count.
    """
    sortBy: DrugSort
  ): BrowseDrugConnection!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
    subject: SubscribableQueryInput
  ): EventConnection!

  """
  Find an evidence item by CIViC ID
  """
  evidenceItem(id: Int!): EvidenceItem

  """
  List and filter evidence items.
  """
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Exact match filtering on the ID of the assertion.
    """
    assertionId: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering on the evidence clinical significance.
    """
    clinicalSignificance: EvidenceClinicalSignificance

    """
    Substring filtering on evidence item description.
    """
    description: String

    """
    Exact match filtering of the evidence items based on the internal CIViC disease id
    """
    diseaseId: Int

    """
    Substring filtering on disease name.
    """
    diseaseName: String

    """
    Exact match filtering of the evidence items based on the internal CIViC drug id
    """
    drugId: Int

    """
    Substring filtering on drug name.
    """
    drugName: String

    """
    Filtering on the evidence direction.
    """
    evidenceDirection: EvidenceDirection

    """
    Filtering on the evidence level.
    """
    evidenceLevel: EvidenceLevel

    """
    Filtering on the evidence rating. Valid values: 1, 2, 3, 4, 5
    """
    evidenceRating: Int

    """
    Filtering on the evidence type.
    """
    evidenceType: EvidenceType

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Exact match filtering on the ID of the evidence item.
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Exact match filtering on the ID of the organization the evidence item was submitted under.
    """
    organizationId: Int

    """
    Exact match filtering of the evidence items based on the internal CIViC phenotype id
    """
    phenotypeId: Int

    """
    Columm and direction to sort evidence on.
    """
    sortBy: EvidenceSort

    """
    Exact match filtering of the evidence items based on the interal CIViC source id
    """
    sourceId: Int

    """
    Filtering on the evidence status.
    """
    status: EvidenceStatus

    """
    Exact match filtering on the ID of the user who submitted the evidence item.
    """
    userId: Int

    """
    Exact match filtering on the ID of the variant.
    """
    variantId: Int

    """
    Filtering on the evidence variant origin.
    """
    variantOrigin: VariantOrigin
  ): EvidenceItemConnection!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    flaggable: FlaggableInput

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!

  """
  Find a gene by CIViC ID
  """
  gene(id: Int!): Gene

  """
  Find an organization by CIViC ID
  """
  organization(id: Int!): Organization

  """
  List and filter organizations.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Exact match filtering on the id of the organization.
    """
    id: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Substring filtering on the name of the organization.
    """
    name: String

    """
    Columm and direction to sort evidence on.
    """
    sortBy: OrganizationSort
  ): OrganizationConnection!

  """
  Find a phenotype by CIViC ID
  """
  phenotype(id: Int!): Phenotype

  """
  List and filter Phenotypes from the Human Phenotype Ontology.
  """
  phenotypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to phenotypes with a specific HPO ID
    """
    hpoId: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on phenotype name (class)
    """
    name: String

    """
    Sort order for the phenotypes. Defaults to the highest evidence item count.
    """
    sortBy: PhenotypeSort
  ): BrowsePhenotypeConnection!

  """
  Check to see if a citation ID for a source not already in CIViC exists in an external database.
  """
  remoteCitation(citationId: Int!, sourceType: SourceSource!): String
  search(
    """
    The term to query for
    """
    query: String!
  ): [SearchResult!]!
  searchByPermalink(permalinkId: String!): AdvancedSearchResult!
  searchGenes(createPermalink: Boolean = false, query: GeneSearchFilter!): AdvancedSearchResult!

  """
  Find a source by CIViC ID
  """
  source(id: Int!): Source

  """
  Provide suggestions for sources based on a partial citation ID
  """
  sourceTypeahead(citationId: Int!, sourceType: SourceSource!): [Source!]!
  user(id: Int!): User

  """
  List and filter users.
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to users that belong to a certain organizations
    """
    organization: OrganizationFilter
  ): UserConnection!

  """
  Find a variant by CIViC ID
  """
  variant(id: Int!): Variant

  """
  Find a variant type by CIViC ID
  """
  variantType(id: Int!): VariantType

  """
  List and filter Variant Types from the Sequence Ontology.
  """
  variantTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Wildcard match on variant type name
    """
    name: String

    """
    Limit to variant types  with a specific Sequence Ontology ID
    """
    soid: String

    """
    Sort order for the variant type. Defaults to most recent.
    """
    sortBy: VariantTypeSort
  ): BrowseVariantTypeConnection!

  """
  List and filter variants.
  """
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit variants by the status of attached evidence.
    """
    evidenceStatusFilter: VariantDisplayFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Gene that variants are associated with.
    """
    geneId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Left anchored filtering for variant name and aliases.
    """
    name: String
  ): VariantConnection!
  viewer: User
}

enum ReferenceBuild {
  GRCH37
  GRCH38
  NCBI36
}

"""
Autogenerated input type of RejectRevision
"""
input RejectRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text explaining the reasoning for rejecting this Revision. Will be attached as a comment.
  """
  comment: String!

  """
  The ID of the Revision to reject.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of RejectRevision
"""
type RejectRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The rejected Revision.
  """
  revision: Revision!
}

"""
Autogenerated input type of ResolveFlag
"""
input ResolveFlagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for resolving the flag. Will be attached as a comment.
  """
  comment: String!

  """
  The ID of the flag to resolve.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of ResolveFlag
"""
type ResolveFlagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  flag: Flag
}

type Revision implements EventOriginObject & EventSubject {
  comments: [Comment!]!
  createdAt: ISO8601DateTime!
  creationEvent: Event
  currentValue: JSON!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  fieldName: String!
  id: Int!
  linkoutData: LinkoutData!
  name: String!
  revisionsetId: String!
  revisor: User!
  status: RevisionStatus!
  suggestedValue: JSON!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Revision.
"""
type RevisionConnection {
  """
  A list of edges.
  """
  edges: [RevisionEdge!]!

  """
  A list of nodes.
  """
  nodes: [Revision!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  List of all fields that have at least one revision.
  """
  revisedFieldNames: [FieldName!]!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!

  """
  List of all users that have submitted a revision to this entity.
  """
  uniqueRevisors: [User!]!
}

"""
An edge in a connection.
"""
type RevisionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Revision
}

type RevisionResult {
  """
  Name of the field on the moderated entity that the Revision pertains to.
  """
  fieldName: String!

  """
  ID of the Revision.
  """
  id: Int!

  """
  Was this Revision newly created as a result of this request?
  """
  newlyCreated: Boolean!

  """
  An identifier that can be used to group Revisions proposed at the same time.
  """
  revisionsetId: String!
}

enum RevisionStatus {
  ACCEPTED
  NEW
  REJECTED
  SUPERSEDED
}

type ScalarField {
  value: String
}

type SearchResult {
  id: Int!
  matchingText: String!
  name: String!
  resultType: SearchableEntities!
}

enum SearchableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  REVISION
  VARIANT
  VARIANT_GROUP
}

enum SortDirection {
  ASC
  DESC
}

type Source implements EventSubject {
  abstract: String
  ascoAbstractId: Int
  authorString: String
  citation: String!
  citationId: Int!
  clinicalTrials: [ClinicalTrial!]
  displayType: String!

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  fullJournalTitle: String
  id: Int!
  journal: String!
  name: String!
  pmcId: String
  publicationDate: String
  publicationDay: Int
  publicationMonth: Int!
  publicationYear: Int!
  sourceType: SourceSource!
  sourceUrl: String!
  status: SourceStatus!
  title: String
}

enum SourceSource {
  ASCO
  PUBMED
}

enum SourceStatus {
  FullyCurated
  PartiallyCurated
  Submitted
}

type SourceStub {
  citationId: Int!
  id: Int!
  sourceType: SourceSource!
}

input SourcesSort {
  """
  Available columns for sorting
  """
  column: SourcesSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum SourcesSortColumns {
  AUTHORS
  CITATION_ID
  EVIDENCE_COUNT
  JOURNAL
  NAME
  SOURCE_TYPE
  YEAR
}

type Stats {
  acceptedAssertions: Int!
  acceptedEvidenceItems: Int!
  appliedRevisions: Int!
  comments: Int!
  revisions: Int!
  submittedAssertions: Int!
  submittedEvidenceItems: Int!
  suggestedSources: Int!
}

input StringSearchInput {
  comparisonOperator: StringSearchOperator!
  value: String!
}

enum StringSearchOperator {
  CONTAINS
  DOES_NOT_CONTAIN
  EQ
  NE
  STARTS_WITH
}

type Subscribable {
  entityType: SubscribableEntities!
  id: Int!
}

"""
Enumeration of all subscribable CIViC entities.
"""
enum SubscribableEntities {
  ASSERTION
  EVIDENCE_ITEM
  GENE
  REVISION
  VARIANT
}

"""
Entity to subscribe to.
"""
input SubscribableInput {
  """
  Type of subscribable entity.
  """
  entityType: SubscribableEntities!

  """
  ID of subscribable entity.
  """
  id: Int!
}

"""
Entity to subscribe to.
"""
input SubscribableQueryInput {
  """
  Type of subscribable entity.
  """
  entityType: SubscribableEntities!

  """
  ID of subscribable entity.
  """
  id: Int!

  """
  Include child entities of the requested subscribable
  """
  includeChildren: Boolean = false
}

"""
Autogenerated input type of Subscribe
"""
input SubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more entities to subscribe to, each identified by its ID and type.
  """
  subscribables: [SubscribableInput!]!

  """
  Do you want to subscribe to related child entities of the subscribed entities?
  IE: If you subscribe to a Gene, do you want to receive notifications for its Variants as well?
  """
  subscribeToChildren: Boolean = false
}

"""
Autogenerated return type of Subscribe
"""
type SubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The newly created subscription objects.
  """
  subscriptions: [Subscription!]!
}

type Subscription {
  id: Int!
}

"""
Autogenerated input type of SuggestEvidenceItemRevision
"""
input SuggestEvidenceItemRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the EvidenceItems's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: EvidenceItemFields!

  """
  The ID of the EvidenceItem to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestEvidenceItemRevision
"""
type SuggestEvidenceItemRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The EvidenceItem the user has proposed a Revision to.
  """
  evidenceItem: EvidenceItem!

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of SuggestGeneRevision
"""
input SuggestGeneRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the Gene's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: GeneFields!

  """
  The ID of the Gene to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestGeneRevision
"""
type SuggestGeneRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The Gene the user has proposed a Revision to.
  """
  gene: Gene!

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!
}

"""
Autogenerated input type of SuggestVariantRevision
"""
input SuggestVariantRevisionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Text describing the reason for the change. Will be attached to the Revision as a comment.
  """
  comment: String!

  """
  The desired state of the Variant's editable fields if the change were applied.
  If no change is desired for a particular field, pass in the current value of that field.
  """
  fields: VariantFields!

  """
  The ID of the Variant to suggest a Revision to.
  """
  id: Int!

  """
  The ID of the organization to credit the user's contributions to.
  If the user belongs to a single organization or no organizations, this field is not required.
  This field is required if the user belongs to more than one organization.
  The user must belong to the organization provided.
  """
  organizationId: Int
}

"""
Autogenerated return type of SuggestVariantRevision
"""
type SuggestVariantRevisionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of Revisions generated as a result of this suggestion.
  If an existing Revision exactly matches the proposed one, it will be returned instead.
  This is indicated via the 'newlyCreated' Boolean.
  Revisions are stored on a per-field basis.
  The changesetId can be used to group Revisions proposed at the same time.
  """
  results: [RevisionResult!]!

  """
  The Variant the user has proposed a Revision to.
  """
  variant: Variant!
}

"""
Autogenerated input type of Unsubscribe
"""
input UnsubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  A list of one or more entities to unsubscribe from, each identified by its ID and type.
  """
  subscribables: [SubscribableInput!]!

  """
  Do you also wish to stop receiving notifications from child entities?
  IE: If you unsubscribe from a Gene do you want to stop receiving notifications for its Variants as well?
  """
  unsubscribeFromChildren: Boolean = false
}

"""
Autogenerated return type of Unsubscribe
"""
type UnsubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The entities that were unsubscribed from.
  """
  unsubscribedEntities: [Subscribable!]!
}

type User {
  areaOfExpertise: String
  bio: String
  country: String
  displayName: String!
  email: String
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  facebookProfile: String
  id: Int!
  linkedinProfile: String
  mostRecentConflictOfInterestStatement: Coi
  name: String!

  """
  Filterable list of notifications for the logged in user.
  """
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter the response to include only notifications generated by certain actions (ex: commenting).
    """
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    includeSeen: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter the response to include only notifications of a certaint type (ex: mentions).
    """
    notificationType: NotificationReason

    """
    Filter the reponse to include only notifications generated by a particular subscription.
    """
    subscriptionId: Int
  ): NotificationConnection
  orcid: String
  organizations: [Organization!]!
  profileImagePath(size: Int = 56): String
  role: String!
  statsHash: Stats!
  twitterHandle: String
  url: String
  username: String!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge!]!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

type Variant implements Commentable & EventSubject & Flaggable & WithRevisions {
  alleleRegistryId: String
  clinvarIds: [String!]

  """
  List and filter comments.
  """
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to comments by a certain user
    """
    originatingUserId: Int

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort
  ): CommentConnection!
  description: String!
  ensemblVersion: Int

  """
  List and filter events for an object
  """
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: EventAction

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizationId: Int
    originatingUserId: Int

    """
    Sort order for the events. Defaults to most recent.
    """
    sortBy: DateSort
  ): EventConnection!
  evidenceItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EvidenceItemConnection!
  evidenceScore: Float!
  fivePrimeCoordinates: Coordinate
  flagged: Boolean!

  """
  List and filter flags.
  """
  flags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Limit to flags added by a certain user
    """
    flaggingUserId: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to flags resolved by a certain user
    """
    resolvingUserId: Int

    """
    Sort order for the flags. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to flags in a particular state
    """
    state: FlagState
  ): FlagConnection!
  gene: Gene!
  hgvsDescriptions: [String!]
  id: Int!
  lastAcceptedRevisionEvent: Event
  lastCommentEvent: Event
  lastSubmittedRevisionEvent: Event
  name: String!
  referenceBuild: ReferenceBuild

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
  sources: [Source!]!
  threePrimeCoordinates: Coordinate
  variantAliases: [String!]
  variantTypes: [VariantType!]
}

"""
The connection type for Variant.
"""
type VariantConnection {
  """
  A list of edges.
  """
  edges: [VariantEdge!]!

  """
  A list of nodes.
  """
  nodes: [Variant!]!

  """
  Total number of pages, based on filtered count and pagesize.
  """
  pageCount: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The total number of records in this filtered collection.
  """
  totalCount: Int!
}

enum VariantDisplayFilter {
  """
  Display all variants regardless of attached evience.
  """
  ALL

  """
  Display only variants which have at least one accepted evidence item.
  """
  WITH_ACCEPTED

  """
  Display only variants which have evidence in either an accepted or submitted state.
  """
  WITH_ACCEPTED_OR_SUBMITTED

  """
  Display variants which have at least one submited evidence item.
  """
  WITH_SUBMITTED
}

"""
An edge in a connection.
"""
type VariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Variant
}

"""
Fields on a Variant that curators may propose revisions to.
"""
input VariantFields {
  """
  List of aliases or alternate names for the Variant.
  """
  aliases: [String!]!

  """
  List of ClinVar IDs for the Variant.
  """
  clinvarIds: ClinvarInput!

  """
  The Variant's description/summary text.
  """
  description: NullableStringInput!

  """
  The Ensembl database version.
  """
  ensemblVersion: Int!

  """
  The ID of the Gene this Variant corresponds to.
  """
  geneId: Int!

  """
  List of HGVS descriptions for the Variant.
  """
  hgvsDescriptions: [String!]!

  """
  The Variant's name.
  """
  name: String!

  """
  The primary coordinates for this Variant. In the case of Fusions this will be the coordinates of the 5' partner.
  """
  primaryCoordinates: CoordinateInput!

  """
  Reference bases for this variant
  """
  referenceBases: NullableStringInput!

  """
  The reference build for the genomic coordinates of this Variant.
  """
  referenceBuild: NullableReferenceBuildTypeInput!

  """
  In the case of Fusions these will be the coordinates of the 3' partner, otherwise set the values to null.
  """
  secondaryCoordinates: CoordinateInput!

  """
  Source IDs cited by the Variant's summary.
  """
  sourceIds: [Int!]!

  """
  Variant bases for this variant
  """
  variantBases: NullableStringInput!

  """
  List of IDs for the variant types for this Variant
  """
  variantTypeIds: [Int!]!
}

input VariantGroupsSort {
  """
  Available columns for sorting
  """
  column: VariantGroupsSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantGroupsSortColumns {
  EVIDENCE_ITEM_COUNT
  GENE_NAMES
  NAME
  VARIANT_COUNT
  VARIANT_NAMES
}

enum VariantOrigin {
  COMMON_GERMLINE
  GERMLINE_OR_SOMATIC
  NA
  RARE_GERMLINE
  SOMATIC
  UNKNOWN
}

type VariantType {
  description: String!
  id: Int!
  name: String!
  soid: String!
  url: String!
}

input VariantTypeSort {
  """
  Available columns for sorting
  """
  column: VariantTypeSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantTypeSortColumns {
  NAME
  SOID
  VARIANT_COUNT
}

input VariantsSort {
  """
  Available columns for sorting
  """
  column: VariantsSortColumns!

  """
  Sort direction
  """
  direction: SortDirection!
}

enum VariantsSortColumns {
  assertionCount
  diseaseName
  drugName
  entrezSymbol
  evidenceItemCount
  evidenceScore
  variantName
}

"""
A CIViC entity that can have revisions proposed to it.
"""
interface WithRevisions {
  lastAcceptedRevisionEvent: Event
  lastSubmittedRevisionEvent: Event

  """
  List and filter revisions.
  """
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Limit to revisions on a particular field.
    """
    fieldName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Limit to revisions by a certain user
    """
    originatingUserId: Int

    """
    Limit to revisions suggested as part of a single Revision Set.
    """
    revisionsetId: String

    """
    Sort order for the comments. Defaults to most recent.
    """
    sortBy: DateSort

    """
    Limit to revisions with a certain status
    """
    status: RevisionStatus
  ): RevisionConnection!
}
